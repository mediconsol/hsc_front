<% content_for :title, "청구서 관리" %>

<div class="min-h-screen bg-gray-50">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="py-6">
        <div class="flex items-center justify-between">
          <div>
            <div class="flex items-center space-x-3">
              <a href="/finance" class="text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
              <h1 class="text-3xl font-bold text-gray-900">청구서 관리</h1>
            </div>
            <p class="mt-2 text-gray-600">공급업체 청구서를 접수하고 지급 처리를 관리합니다</p>
          </div>
          <div class="flex space-x-3">
            <button onclick="openCreateInvoiceModal()" class="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              청구서 등록
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 필터 및 검색 -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
        <!-- 검색 -->
        <div class="lg:col-span-2">
          <label class="block text-sm font-medium text-gray-700 mb-2">검색</label>
          <input type="text" id="search-input" placeholder="청구서번호, 공급업체 검색..."
                 class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
        </div>
        
        <!-- 공급업체 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">공급업체</label>
          <select id="vendor-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
            <option value="">전체 공급업체</option>
          </select>
        </div>
        
        <!-- 상태 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">상태</label>
          <select id="status-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
            <option value="">전체 상태</option>
            <option value="received">접수완료</option>
            <option value="reviewing">검토중</option>
            <option value="approved">승인완료</option>
            <option value="paid">지급완료</option>
            <option value="rejected">반려</option>
            <option value="overdue">연체</option>
            <option value="cancelled">취소</option>
          </select>
        </div>
        
        <!-- 기간 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">기간</label>
          <select id="period-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
            <option value="">전체 기간</option>
            <option value="current_month">이번 달</option>
            <option value="due_soon">곧 만료 (7일 이내)</option>
            <option value="overdue">연체</option>
          </select>
        </div>
        
        <!-- 날짜 범위 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">발행일 범위</label>
          <input type="date" id="start-date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
        </div>
      </div>
    </div>

    <!-- 청구서 목록 -->
    <div class="bg-white rounded-lg shadow-sm border">
      <!-- 테이블 헤더 -->
      <div class="px-6 py-4 border-b bg-gray-50">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900">청구서 목록</h3>
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600">총 <span id="total-count">0</span>건</span>
            <span class="text-sm text-yellow-600">미지급 <span id="pending-count">0</span>건</span>
            <span class="text-sm text-red-600">연체 <span id="overdue-count">0</span>건</span>
          </div>
        </div>
      </div>

      <!-- 테이블 -->
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50 border-b">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">청구서 정보</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">공급업체</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">금액</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">발행일</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">지급기한</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">상태</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">처리자</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">작업</th>
            </tr>
          </thead>
          <tbody id="invoices-table-body" class="bg-white divide-y divide-gray-200">
            <!-- JavaScript로 채워질 내용 -->
          </tbody>
        </table>
      </div>

      <!-- 로딩/빈 상태 -->
      <div id="loading-state" class="text-center py-12">
        <svg class="w-8 h-8 animate-spin mx-auto mb-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        <p class="text-gray-600">데이터를 불러오는 중...</p>
      </div>

      <div id="empty-state" class="text-center py-12 hidden">
        <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
        </svg>
        <p class="text-gray-600">검색 조건에 맞는 청구서가 없습니다</p>
      </div>
    </div>
  </div>
</div>

<!-- 청구서 생성/수정 모달 -->
<div id="invoice-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h3 id="modal-title" class="text-lg font-semibold text-gray-900">새 청구서 등록</h3>
        <button onclick="closeInvoiceModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="invoice-form" onsubmit="saveInvoice(event)">
        <input type="hidden" id="invoice-id">
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- 청구서 번호 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">청구서 번호 *</label>
            <input type="text" id="modal-invoice-number" required maxlength="100"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                   placeholder="청구서 번호">
          </div>

          <!-- 공급업체 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">공급업체 *</label>
            <input type="text" id="modal-vendor" required maxlength="255"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                   placeholder="공급업체명">
          </div>

          <!-- 발행일 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">발행일 *</label>
            <input type="date" id="modal-issue-date" required
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
          </div>

          <!-- 지급기한 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">지급기한 *</label>
            <input type="date" id="modal-due-date" required
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
          </div>

          <!-- 총 금액 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">총 금액 *</label>
            <input type="number" id="modal-total-amount" required min="0" step="1000"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                   placeholder="총 금액 (세금 포함)" onchange="calculateNetAmount()">
          </div>

          <!-- 세액 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">세액</label>
            <input type="number" id="modal-tax-amount" min="0" step="1000"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                   placeholder="세액" onchange="calculateNetAmount()">
          </div>

          <!-- 순액 (자동 계산) -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">순액 (자동 계산)</label>
            <input type="number" id="modal-net-amount" readonly
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-700"
                   placeholder="순액 = 총액 - 세액">
          </div>

          <!-- 비고 -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">비고</label>
            <textarea id="modal-notes" rows="3"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                      placeholder="청구서에 대한 비고사항"></textarea>
          </div>
        </div>

        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeInvoiceModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
            취소
          </button>
          <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
            저장
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- 처리 모달 -->
<div id="process-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-md w-full mx-4">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h3 id="process-modal-title" class="text-lg font-semibold text-gray-900">청구서 처리</h3>
        <button onclick="closeProcessModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div id="process-content">
        <!-- JavaScript로 채워질 내용 -->
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<script>
let invoices = [];
let vendors = [];

document.addEventListener('DOMContentLoaded', function() {
  loadVendors();
  loadInvoices();
  setupFilterListeners();
  
  // 오늘 날짜를 기본값으로 설정
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('modal-issue-date').value = today;
  
  // 30일 후를 지급기한 기본값으로 설정
  const dueDate = new Date();
  dueDate.setDate(dueDate.getDate() + 30);
  document.getElementById('modal-due-date').value = dueDate.toISOString().split('T')[0];
});

function setupFilterListeners() {
  const searchInput = document.getElementById('search-input');
  const vendorFilter = document.getElementById('vendor-filter');
  const statusFilter = document.getElementById('status-filter');
  const periodFilter = document.getElementById('period-filter');
  const startDate = document.getElementById('start-date');

  let debounceTimer;
  
  [searchInput, vendorFilter, statusFilter, periodFilter, startDate].forEach(element => {
    element.addEventListener('input', () => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(applyFilters, 300);
    });
  });
}

async function loadVendors() {
  try {
    const response = await fetch('/api/v1/invoices/vendors', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) throw new Error('공급업체 목록 로드 실패');
    const result = await response.json();
    
    vendors = result.data || [];
    
    // 필터 옵션 업데이트
    const vendorFilter = document.getElementById('vendor-filter');
    
    if (vendorFilter) {
      const currentValue = vendorFilter.value;
      vendorFilter.innerHTML = '<option value="">전체 공급업체</option>';
      
      vendors.forEach(vendor => {
        const option = document.createElement('option');
        option.value = vendor.name;
        option.textContent = `${vendor.name} (${vendor.total_invoices}건)`;
        vendorFilter.appendChild(option);
      });
      
      if (currentValue) vendorFilter.value = currentValue;
    }
  } catch (error) {
    console.error('공급업체 목록 로드 실패:', error);
  }
}

async function loadInvoices() {
  try {
    showLoading();
    
    const params = new URLSearchParams();
    applyCurrentFilters(params);
    
    const response = await fetch(`/api/v1/invoices?${params}`, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) throw new Error('청구서 목록 로드 실패');
    const result = await response.json();
    
    invoices = result.data || [];
    displayInvoices();
    updateTotalCount(
      result.meta?.total || 0,
      result.meta?.pending_payment || 0,
      result.meta?.overdue_count || 0
    );
    
  } catch (error) {
    console.error('청구서 목록 로드 실패:', error);
    showError('청구서 목록을 불러오는 데 실패했습니다.');
  }
}

function applyCurrentFilters(params) {
  const search = document.getElementById('search-input').value.trim();
  const vendor = document.getElementById('vendor-filter').value;
  const status = document.getElementById('status-filter').value;
  const period = document.getElementById('period-filter').value;
  const startDate = document.getElementById('start-date').value;

  if (search) params.append('search', search);
  if (vendor) params.append('vendor', vendor);
  if (status) params.append('status', status);
  if (period) params.append('period', period);
  if (startDate) params.append('start_date', startDate);
}

function applyFilters() {
  loadInvoices();
}

function displayInvoices() {
  const tbody = document.getElementById('invoices-table-body');
  
  hideLoading();
  
  if (invoices.length === 0) {
    showEmpty();
    tbody.innerHTML = '';
    return;
  }
  
  hideEmpty();
  
  tbody.innerHTML = invoices.map(invoice => `
    <tr class="hover:bg-gray-50">
      <td class="px-6 py-4">
        <div>
          <div class="font-medium text-gray-900">${invoice.invoice_number}</div>
          <div class="text-sm text-gray-600">세율: ${invoice.tax_rate}%</div>
          ${invoice.is_urgent ? '<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 mt-1"><span class="mr-1">⚠️</span>긴급</span>' : ''}
        </div>
      </td>
      <td class="px-6 py-4">
        <div class="font-medium text-gray-900">${invoice.vendor}</div>
      </td>
      <td class="px-6 py-4">
        <div class="font-medium text-gray-900">${invoice.formatted_total_amount}</div>
        <div class="text-xs text-gray-500">
          <div>세액: ${invoice.formatted_tax_amount}</div>
          <div>순액: ${invoice.formatted_net_amount}</div>
        </div>
      </td>
      <td class="px-6 py-4">
        <div class="text-sm text-gray-900">${formatDate(invoice.issue_date)}</div>
      </td>
      <td class="px-6 py-4">
        <div class="text-sm text-gray-900">${formatDate(invoice.due_date)}</div>
        ${invoice.is_overdue ? `
          <div class="text-xs text-red-600 font-medium">${invoice.days_overdue}일 연체</div>
        ` : `
          <div class="text-xs text-gray-500">${invoice.days_until_due}일 남음</div>
        `}
      </td>
      <td class="px-6 py-4">
        <span class="px-2 py-1 text-xs font-medium rounded-full ${invoice.status_color}">
          ${invoice.status_text}
        </span>
      </td>
      <td class="px-6 py-4">
        ${invoice.processor ? `
          <div class="text-sm text-gray-900">${invoice.processor.name}</div>
          <div class="text-xs text-gray-500">${invoice.processor.email}</div>
        ` : '<span class="text-gray-400 text-sm">-</span>'}
      </td>
      <td class="px-6 py-4">
        <div class="flex flex-col space-y-1">
          ${invoice.can_edit ? `
            <button onclick="editInvoice(${invoice.id})" class="text-blue-600 hover:text-blue-800 text-sm text-left">
              수정
            </button>
            <button onclick="deleteInvoice(${invoice.id})" class="text-red-600 hover:text-red-800 text-sm text-left">
              삭제
            </button>
          ` : ''}
          ${invoice.can_process && invoice.status === 'received' ? `
            <button onclick="startReview(${invoice.id})" class="text-blue-600 hover:text-blue-800 text-sm text-left">
              검토시작
            </button>
          ` : ''}
          ${invoice.can_process && ['received', 'reviewing'].includes(invoice.status) ? `
            <button onclick="showProcessModal(${invoice.id}, 'approve')" class="text-green-600 hover:text-green-800 text-sm text-left">
              승인
            </button>
            <button onclick="showProcessModal(${invoice.id}, 'reject')" class="text-red-600 hover:text-red-800 text-sm text-left">
              반려
            </button>
          ` : ''}
          ${invoice.status === 'approved' && invoice.can_process ? `
            <button onclick="showProcessModal(${invoice.id}, 'pay')" class="text-purple-600 hover:text-purple-800 text-sm text-left">
              지급완료
            </button>
          ` : ''}
        </div>
      </td>
    </tr>
  `).join('');
}

function showLoading() {
  document.getElementById('loading-state').classList.remove('hidden');
  document.getElementById('empty-state').classList.add('hidden');
}

function hideLoading() {
  document.getElementById('loading-state').classList.add('hidden');
}

function showEmpty() {
  document.getElementById('empty-state').classList.remove('hidden');
}

function hideEmpty() {
  document.getElementById('empty-state').classList.add('hidden');
}

function updateTotalCount(total, pending, overdue) {
  document.getElementById('total-count').textContent = total;
  document.getElementById('pending-count').textContent = pending;
  document.getElementById('overdue-count').textContent = overdue;
}

function openCreateInvoiceModal() {
  document.getElementById('modal-title').textContent = '새 청구서 등록';
  document.getElementById('invoice-form').reset();
  document.getElementById('invoice-id').value = '';
  
  // 기본값 설정
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('modal-issue-date').value = today;
  
  const dueDate = new Date();
  dueDate.setDate(dueDate.getDate() + 30);
  document.getElementById('modal-due-date').value = dueDate.toISOString().split('T')[0];
  
  document.getElementById('invoice-modal').classList.remove('hidden');
}

function editInvoice(invoiceId) {
  const invoice = invoices.find(i => i.id === invoiceId);
  if (!invoice) return;
  
  document.getElementById('modal-title').textContent = '청구서 수정';
  document.getElementById('invoice-id').value = invoice.id;
  document.getElementById('modal-invoice-number').value = invoice.invoice_number;
  document.getElementById('modal-vendor').value = invoice.vendor;
  document.getElementById('modal-issue-date').value = invoice.issue_date;
  document.getElementById('modal-due-date').value = invoice.due_date;
  document.getElementById('modal-total-amount').value = invoice.total_amount;
  document.getElementById('modal-tax-amount').value = invoice.tax_amount;
  document.getElementById('modal-net-amount').value = invoice.net_amount;
  document.getElementById('modal-notes').value = invoice.notes || '';
  
  document.getElementById('invoice-modal').classList.remove('hidden');
}

function closeInvoiceModal() {
  document.getElementById('invoice-modal').classList.add('hidden');
}

function calculateNetAmount() {
  const totalAmount = parseFloat(document.getElementById('modal-total-amount').value) || 0;
  const taxAmount = parseFloat(document.getElementById('modal-tax-amount').value) || 0;
  const netAmount = totalAmount - taxAmount;
  
  document.getElementById('modal-net-amount').value = netAmount >= 0 ? netAmount : 0;
}

async function saveInvoice(event) {
  event.preventDefault();
  
  const invoiceId = document.getElementById('invoice-id').value;
  const formData = {
    invoice_number: document.getElementById('modal-invoice-number').value,
    vendor: document.getElementById('modal-vendor').value,
    issue_date: document.getElementById('modal-issue-date').value,
    due_date: document.getElementById('modal-due-date').value,
    total_amount: parseFloat(document.getElementById('modal-total-amount').value),
    tax_amount: parseFloat(document.getElementById('modal-tax-amount').value) || 0,
    notes: document.getElementById('modal-notes').value
  };

  try {
    const url = invoiceId ? `/api/v1/invoices/${invoiceId}` : '/api/v1/invoices';
    const method = invoiceId ? 'PATCH' : 'POST';
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ invoice: formData })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeInvoiceModal();
      loadInvoices();
      loadVendors(); // 새 공급업체가 추가될 수 있으므로
    } else {
      showError(result.message || '청구서 저장에 실패했습니다.');
    }
  } catch (error) {
    console.error('청구서 저장 실패:', error);
    showError('청구서 저장 중 오류가 발생했습니다.');
  }
}

async function deleteInvoice(invoiceId) {
  if (!confirm('정말로 이 청구서를 삭제하시겠습니까?')) return;
  
  try {
    const response = await fetch(`/api/v1/invoices/${invoiceId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      loadInvoices();
    } else {
      showError(result.message || '청구서 삭제에 실패했습니다.');
    }
  } catch (error) {
    console.error('청구서 삭제 실패:', error);
    showError('청구서 삭제 중 오류가 발생했습니다.');
  }
}

async function startReview(invoiceId) {
  try {
    const response = await fetch(`/api/v1/invoices/${invoiceId}/start_review`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      loadInvoices();
    } else {
      showError(result.message || '검토 시작에 실패했습니다.');
    }
  } catch (error) {
    console.error('검토 시작 실패:', error);
    showError('검토 시작 중 오류가 발생했습니다.');
  }
}

function showProcessModal(invoiceId, action) {
  const invoice = invoices.find(i => i.id === invoiceId);
  if (!invoice) return;
  
  let title, content;
  
  switch (action) {
    case 'approve':
      title = '청구서 승인';
      content = `
        <div class="mb-4">
          <h4 class="font-medium text-gray-900 mb-2">청구서 정보</h4>
          <div class="bg-gray-50 p-4 rounded-lg space-y-2">
            <div><span class="font-medium">청구서번호:</span> ${invoice.invoice_number}</div>
            <div><span class="font-medium">공급업체:</span> ${invoice.vendor}</div>
            <div><span class="font-medium">총 금액:</span> ${invoice.formatted_total_amount}</div>
            <div><span class="font-medium">지급기한:</span> ${formatDate(invoice.due_date)}</div>
          </div>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button onclick="closeProcessModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200">
            취소
          </button>
          <button onclick="approveInvoice(${invoiceId})" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
            승인
          </button>
        </div>
      `;
      break;
      
    case 'reject':
      title = '청구서 반려';
      content = `
        <div class="mb-4">
          <h4 class="font-medium text-gray-900 mb-2">청구서 정보</h4>
          <div class="bg-gray-50 p-4 rounded-lg space-y-2">
            <div><span class="font-medium">청구서번호:</span> ${invoice.invoice_number}</div>
            <div><span class="font-medium">공급업체:</span> ${invoice.vendor}</div>
            <div><span class="font-medium">총 금액:</span> ${invoice.formatted_total_amount}</div>
          </div>
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">반려 사유</label>
          <textarea id="rejection-reason" rows="3" 
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                    placeholder="반려 사유를 입력하세요"></textarea>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button onclick="closeProcessModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200">
            취소
          </button>
          <button onclick="rejectInvoice(${invoiceId})" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
            반려
          </button>
        </div>
      `;
      break;
      
    case 'pay':
      title = '지급 완료 처리';
      const today = new Date().toISOString().split('T')[0];
      content = `
        <div class="mb-4">
          <h4 class="font-medium text-gray-900 mb-2">청구서 정보</h4>
          <div class="bg-gray-50 p-4 rounded-lg space-y-2">
            <div><span class="font-medium">청구서번호:</span> ${invoice.invoice_number}</div>
            <div><span class="font-medium">공급업체:</span> ${invoice.vendor}</div>
            <div><span class="font-medium">총 금액:</span> ${invoice.formatted_total_amount}</div>
          </div>
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">지급일</label>
          <input type="date" id="payment-date" value="${today}"
                 class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
        </div>
        
        <div class="flex justify-end space-x-3">
          <button onclick="closeProcessModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200">
            취소
          </button>
          <button onclick="markInvoiceAsPaid(${invoiceId})" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
            지급완료
          </button>
        </div>
      `;
      break;
  }
  
  document.getElementById('process-modal-title').textContent = title;
  document.getElementById('process-content').innerHTML = content;
  document.getElementById('process-modal').classList.remove('hidden');
}

function closeProcessModal() {
  document.getElementById('process-modal').classList.add('hidden');
}

async function approveInvoice(invoiceId) {
  try {
    const response = await fetch(`/api/v1/invoices/${invoiceId}/approve`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeProcessModal();
      loadInvoices();
    } else {
      showError(result.message || '청구서 승인에 실패했습니다.');
    }
  } catch (error) {
    console.error('청구서 승인 실패:', error);
    showError('청구서 승인 중 오류가 발생했습니다.');
  }
}

async function rejectInvoice(invoiceId) {
  const reason = document.getElementById('rejection-reason').value.trim();
  
  try {
    const response = await fetch(`/api/v1/invoices/${invoiceId}/reject`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ reason: reason })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeProcessModal();
      loadInvoices();
    } else {
      showError(result.message || '청구서 반려에 실패했습니다.');
    }
  } catch (error) {
    console.error('청구서 반려 실패:', error);
    showError('청구서 반려 중 오류가 발생했습니다.');
  }
}

async function markInvoiceAsPaid(invoiceId) {
  const paymentDate = document.getElementById('payment-date').value;
  
  try {
    const response = await fetch(`/api/v1/invoices/${invoiceId}/mark_as_paid`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ payment_date: paymentDate })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeProcessModal();
      loadInvoices();
    } else {
      showError(result.message || '지급 처리에 실패했습니다.');
    }
  } catch (error) {
    console.error('지급 처리 실패:', error);
    showError('지급 처리 중 오류가 발생했습니다.');
  }
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ko-KR');
}

function formatCurrency(amount) {
  return new Intl.NumberFormat('ko-KR', {
    style: 'currency',
    currency: 'KRW'
  }).format(amount);
}

function showSuccess(message) {
  // 성공 메시지 표시 (실제로는 toast로 구현)
  alert(message);
}

function showError(message) {
  // 에러 메시지 표시 (실제로는 toast로 구현)
  alert(message);
}
</script>