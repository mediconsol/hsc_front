<% content_for :title, "지출 관리" %>

<div class="min-h-screen bg-gray-50">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="py-6">
        <div class="flex items-center justify-between">
          <div>
            <div class="flex items-center space-x-3">
              <a href="/finance" class="text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
              <h1 class="text-3xl font-bold text-gray-900">지출 관리</h1>
            </div>
            <p class="mt-2 text-gray-600">지출 요청을 등록하고 승인 프로세스를 관리합니다</p>
          </div>
          <div class="flex space-x-3">
            <button onclick="openCreateExpenseModal()" class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              지출 요청
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 필터 및 검색 -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
        <!-- 검색 -->
        <div class="lg:col-span-2">
          <label class="block text-sm font-medium text-gray-700 mb-2">검색</label>
          <input type="text" id="search-input" placeholder="제목, 설명, 공급업체 검색..."
                 class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
        </div>
        
        <!-- 부서 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">부서</label>
          <select id="department-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
            <option value="">전체 부서</option>
          </select>
        </div>
        
        <!-- 카테고리 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">카테고리</label>
          <select id="category-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
            <option value="">전체 카테고리</option>
          </select>
        </div>
        
        <!-- 상태 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">상태</label>
          <select id="status-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
            <option value="">전체 상태</option>
            <option value="pending">승인대기</option>
            <option value="approved">승인완료</option>
            <option value="rejected">반려</option>
            <option value="paid">지급완료</option>
            <option value="cancelled">취소</option>
          </select>
        </div>
        
        <!-- 기간 필터 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">기간</label>
          <select id="period-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
            <option value="">전체 기간</option>
            <option value="current_month">이번 달</option>
            <option value="last_month">지난 달</option>
            <option value="last_3_months">최근 3개월</option>
          </select>
        </div>
      </div>
    </div>

    <!-- 지출 목록 -->
    <div class="bg-white rounded-lg shadow-sm border">
      <!-- 테이블 헤더 -->
      <div class="px-6 py-4 border-b bg-gray-50">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900">지출 목록</h3>
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600">총 <span id="total-count">0</span>건</span>
            <span class="text-sm text-yellow-600">승인대기 <span id="pending-count">0</span>건</span>
          </div>
        </div>
      </div>

      <!-- 테이블 -->
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50 border-b">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">지출 내역</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">금액</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">부서/카테고리</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">지출일자</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">상태</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">요청자</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">승인자</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">작업</th>
            </tr>
          </thead>
          <tbody id="expenses-table-body" class="bg-white divide-y divide-gray-200">
            <!-- JavaScript로 채워질 내용 -->
          </tbody>
        </table>
      </div>

      <!-- 로딩/빈 상태 -->
      <div id="loading-state" class="text-center py-12">
        <svg class="w-8 h-8 animate-spin mx-auto mb-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        <p class="text-gray-600">데이터를 불러오는 중...</p>
      </div>

      <div id="empty-state" class="text-center py-12 hidden">
        <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
        </svg>
        <p class="text-gray-600">검색 조건에 맞는 지출 내역이 없습니다</p>
      </div>
    </div>
  </div>
</div>

<!-- 지출 생성/수정 모달 -->
<div id="expense-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h3 id="modal-title" class="text-lg font-semibold text-gray-900">새 지출 요청</h3>
        <button onclick="closeExpenseModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="expense-form" onsubmit="saveExpense(event)">
        <input type="hidden" id="expense-id">
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- 제목 -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">제목 *</label>
            <input type="text" id="modal-title-input" required maxlength="255"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                   placeholder="지출 제목을 입력하세요">
          </div>

          <!-- 금액 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">금액 *</label>
            <input type="number" id="modal-amount" required min="0" step="1000"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                   placeholder="지출 금액">
          </div>

          <!-- 지출일자 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">지출일자 *</label>
            <input type="date" id="modal-expense-date" required
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
          </div>

          <!-- 부서 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">부서 *</label>
            <select id="modal-department" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
              <option value="">부서를 선택하세요</option>
            </select>
          </div>

          <!-- 카테고리 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">카테고리 *</label>
            <select id="modal-category" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
              <option value="">카테고리를 선택하세요</option>
            </select>
          </div>

          <!-- 공급업체 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">공급업체</label>
            <input type="text" id="modal-vendor" maxlength="255"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                   placeholder="공급업체명">
          </div>

          <!-- 결제방법 -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">결제방법 *</label>
            <select id="modal-payment-method" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
              <option value="card">카드결제</option>
              <option value="cash">현금결제</option>
              <option value="transfer">계좌이체</option>
              <option value="check">수표</option>
              <option value="other">기타</option>
            </select>
          </div>

          <!-- 영수증 번호 -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">영수증 번호</label>
            <input type="text" id="modal-receipt-number" maxlength="100"
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                   placeholder="영수증 번호 (선택사항)">
          </div>

          <!-- 설명 -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">설명</label>
            <textarea id="modal-description" rows="3"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                      placeholder="지출에 대한 설명을 입력하세요"></textarea>
          </div>
        </div>

        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeExpenseModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
            취소
          </button>
          <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            저장
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- 승인/반려 모달 -->
<div id="approval-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-md w-full mx-4">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h3 id="approval-modal-title" class="text-lg font-semibold text-gray-900">지출 승인</h3>
        <button onclick="closeApprovalModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div id="approval-content">
        <!-- JavaScript로 채워질 내용 -->
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<script>
let expenses = [];
let departments = [];
let categories = [];

document.addEventListener('DOMContentLoaded', function() {
  loadDepartments();
  loadCategories(); 
  loadExpenses();
  setupFilterListeners();
  
  // 오늘 날짜를 기본값으로 설정
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('modal-expense-date').value = today;
});

function setupFilterListeners() {
  const searchInput = document.getElementById('search-input');
  const departmentFilter = document.getElementById('department-filter');
  const categoryFilter = document.getElementById('category-filter');
  const statusFilter = document.getElementById('status-filter');
  const periodFilter = document.getElementById('period-filter');

  let debounceTimer;
  
  [searchInput, departmentFilter, categoryFilter, statusFilter, periodFilter].forEach(element => {
    element.addEventListener('input', () => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(applyFilters, 300);
    });
  });
}

async function loadDepartments() {
  try {
    const response = await fetch('/api/v1/budgets/departments', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) throw new Error('부서 목록 로드 실패');
    const result = await response.json();
    
    departments = result.data || [];
    
    // 필터 옵션 업데이트
    const departmentFilter = document.getElementById('department-filter');
    const modalDepartment = document.getElementById('modal-department');
    
    [departmentFilter, modalDepartment].forEach(select => {
      if (select) {
        const currentValue = select.value;
        select.innerHTML = select === departmentFilter ? '<option value="">전체 부서</option>' : '<option value="">부서를 선택하세요</option>';
        
        departments.forEach(dept => {
          const option = document.createElement('option');
          option.value = dept.value;
          option.textContent = dept.text;
          select.appendChild(option);
        });
        
        if (currentValue) select.value = currentValue;
      }
    });
  } catch (error) {
    console.error('부서 목록 로드 실패:', error);
  }
}

async function loadCategories() {
  try {
    const response = await fetch('/api/v1/budgets/categories', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) throw new Error('카테고리 목록 로드 실패');
    const result = await response.json();
    
    categories = result.data || [];
    
    // 필터 옵션 업데이트
    const categoryFilter = document.getElementById('category-filter');
    const modalCategory = document.getElementById('modal-category');
    
    [categoryFilter, modalCategory].forEach(select => {
      if (select) {
        const currentValue = select.value;
        select.innerHTML = select === categoryFilter ? '<option value="">전체 카테고리</option>' : '<option value="">카테고리를 선택하세요</option>';
        
        categories.forEach(cat => {
          const option = document.createElement('option');
          option.value = cat.value;
          option.textContent = cat.text;
          select.appendChild(option);
        });
        
        if (currentValue) select.value = currentValue;
      }
    });
  } catch (error) {
    console.error('카테고리 목록 로드 실패:', error);
  }
}

async function loadExpenses() {
  try {
    showLoading();
    
    const params = new URLSearchParams();
    applyCurrentFilters(params);
    
    const response = await fetch(`/api/v1/expenses?${params}`, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) throw new Error('지출 목록 로드 실패');
    const result = await response.json();
    
    expenses = result.data || [];
    displayExpenses();
    updateTotalCount(result.meta?.total || 0, result.meta?.pending_approval || 0);
    
  } catch (error) {
    console.error('지출 목록 로드 실패:', error);
    showError('지출 목록을 불러오는 데 실패했습니다.');
  }
}

function applyCurrentFilters(params) {
  const search = document.getElementById('search-input').value.trim();
  const department = document.getElementById('department-filter').value;
  const category = document.getElementById('category-filter').value;
  const status = document.getElementById('status-filter').value;
  const period = document.getElementById('period-filter').value;

  if (search) params.append('search', search);
  if (department) params.append('department', department);
  if (category) params.append('category', category);
  if (status) params.append('status', status);
  if (period) params.append('period', period);
}

function applyFilters() {
  loadExpenses();
}

function displayExpenses() {
  const tbody = document.getElementById('expenses-table-body');
  
  hideLoading();
  
  if (expenses.length === 0) {
    showEmpty();
    tbody.innerHTML = '';
    return;
  }
  
  hideEmpty();
  
  tbody.innerHTML = expenses.map(expense => `
    <tr class="hover:bg-gray-50">
      <td class="px-6 py-4">
        <div>
          <div class="font-medium text-gray-900">${expense.title}</div>
          <div class="text-sm text-gray-600">${expense.vendor || '공급업체 없음'}</div>
          ${expense.is_urgent ? '<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 mt-1"><span class="mr-1">🔥</span>긴급</span>' : ''}
        </div>
      </td>
      <td class="px-6 py-4">
        <div class="font-medium text-gray-900">${expense.formatted_amount}</div>
        <div class="text-xs text-gray-500">${expense.payment_method_text}</div>
      </td>
      <td class="px-6 py-4">
        <div class="text-sm text-gray-900">${expense.department_text}</div>
        <div class="text-xs text-gray-500">${expense.category_text}</div>
      </td>
      <td class="px-6 py-4">
        <div class="text-sm text-gray-900">${formatDate(expense.expense_date)}</div>
        <div class="text-xs text-gray-500">${expense.days_since_request}일 전 요청</div>
      </td>
      <td class="px-6 py-4">
        <span class="px-2 py-1 text-xs font-medium rounded-full ${expense.status_color}">
          ${expense.status_text}
        </span>
      </td>
      <td class="px-6 py-4">
        <div class="text-sm text-gray-900">${expense.requester.name}</div>
        <div class="text-xs text-gray-500">${expense.requester.email}</div>
      </td>
      <td class="px-6 py-4">
        ${expense.approver ? `
          <div class="text-sm text-gray-900">${expense.approver.name}</div>
          <div class="text-xs text-gray-500">${expense.approver.email}</div>
        ` : '<span class="text-gray-400 text-sm">-</span>'}
      </td>
      <td class="px-6 py-4">
        <div class="flex flex-col space-y-1">
          ${expense.can_edit ? `
            <button onclick="editExpense(${expense.id})" class="text-blue-600 hover:text-blue-800 text-sm text-left">
              수정
            </button>
            <button onclick="deleteExpense(${expense.id})" class="text-red-600 hover:text-red-800 text-sm text-left">
              삭제
            </button>
          ` : ''}
          ${expense.can_approve ? `
            <button onclick="showApprovalModal(${expense.id}, 'approve')" class="text-green-600 hover:text-green-800 text-sm text-left">
              승인
            </button>
            <button onclick="showApprovalModal(${expense.id}, 'reject')" class="text-red-600 hover:text-red-800 text-sm text-left">
              반려
            </button>
          ` : ''}
          ${expense.status === 'approved' && (expense.can_edit || expense.can_approve) ? `
            <button onclick="markAsPaid(${expense.id})" class="text-purple-600 hover:text-purple-800 text-sm text-left">
              지급완료
            </button>
          ` : ''}
        </div>
      </td>
    </tr>
  `).join('');
}

function showLoading() {
  document.getElementById('loading-state').classList.remove('hidden');
  document.getElementById('empty-state').classList.add('hidden');
}

function hideLoading() {
  document.getElementById('loading-state').classList.add('hidden');
}

function showEmpty() {
  document.getElementById('empty-state').classList.remove('hidden');
}

function hideEmpty() {
  document.getElementById('empty-state').classList.add('hidden');
}

function updateTotalCount(total, pending) {
  document.getElementById('total-count').textContent = total;
  document.getElementById('pending-count').textContent = pending;
}

function openCreateExpenseModal() {
  document.getElementById('modal-title').textContent = '새 지출 요청';
  document.getElementById('expense-form').reset();
  document.getElementById('expense-id').value = '';
  
  // 오늘 날짜를 기본값으로 설정
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('modal-expense-date').value = today;
  
  document.getElementById('expense-modal').classList.remove('hidden');
}

function editExpense(expenseId) {
  const expense = expenses.find(e => e.id === expenseId);
  if (!expense) return;
  
  document.getElementById('modal-title').textContent = '지출 수정';
  document.getElementById('expense-id').value = expense.id;
  document.getElementById('modal-title-input').value = expense.title;
  document.getElementById('modal-amount').value = expense.amount;
  document.getElementById('modal-expense-date').value = expense.expense_date;
  document.getElementById('modal-department').value = expense.department;
  document.getElementById('modal-category').value = expense.category;
  document.getElementById('modal-vendor').value = expense.vendor || '';
  document.getElementById('modal-payment-method').value = expense.payment_method;
  document.getElementById('modal-receipt-number').value = expense.receipt_number || '';
  document.getElementById('modal-description').value = expense.description || '';
  
  document.getElementById('expense-modal').classList.remove('hidden');
}

function closeExpenseModal() {
  document.getElementById('expense-modal').classList.add('hidden');
}

async function saveExpense(event) {
  event.preventDefault();
  
  const expenseId = document.getElementById('expense-id').value;
  const formData = {
    title: document.getElementById('modal-title-input').value,
    amount: parseFloat(document.getElementById('modal-amount').value),
    expense_date: document.getElementById('modal-expense-date').value,
    department: document.getElementById('modal-department').value,
    category: document.getElementById('modal-category').value,
    vendor: document.getElementById('modal-vendor').value,
    payment_method: document.getElementById('modal-payment-method').value,
    receipt_number: document.getElementById('modal-receipt-number').value,
    description: document.getElementById('modal-description').value
  };

  try {
    const url = expenseId ? `/api/v1/expenses/${expenseId}` : '/api/v1/expenses';
    const method = expenseId ? 'PATCH' : 'POST';
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ expense: formData })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeExpenseModal();
      loadExpenses();
    } else {
      showError(result.message || '지출 저장에 실패했습니다.');
    }
  } catch (error) {
    console.error('지출 저장 실패:', error);
    showError('지출 저장 중 오류가 발생했습니다.');
  }
}

async function deleteExpense(expenseId) {
  if (!confirm('정말로 이 지출 요청을 삭제하시겠습니까?')) return;
  
  try {
    const response = await fetch(`/api/v1/expenses/${expenseId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      loadExpenses();
    } else {
      showError(result.message || '지출 삭제에 실패했습니다.');
    }
  } catch (error) {
    console.error('지출 삭제 실패:', error);
    showError('지출 삭제 중 오류가 발생했습니다.');
  }
}

function showApprovalModal(expenseId, action) {
  const expense = expenses.find(e => e.id === expenseId);
  if (!expense) return;
  
  const isApprove = action === 'approve';
  
  document.getElementById('approval-modal-title').textContent = 
    isApprove ? '지출 승인' : '지출 반려';
  
  document.getElementById('approval-content').innerHTML = `
    <div class="mb-4">
      <h4 class="font-medium text-gray-900 mb-2">지출 정보</h4>
      <div class="bg-gray-50 p-4 rounded-lg space-y-2">
        <div><span class="font-medium">제목:</span> ${expense.title}</div>
        <div><span class="font-medium">금액:</span> ${expense.formatted_amount}</div>
        <div><span class="font-medium">요청자:</span> ${expense.requester.name}</div>
        <div><span class="font-medium">부서:</span> ${expense.department_text}</div>
      </div>
    </div>
    
    ${!isApprove ? `
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">반려 사유</label>
        <textarea id="rejection-reason" rows="3" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                  placeholder="반려 사유를 입력하세요"></textarea>
      </div>
    ` : ''}
    
    <div class="flex justify-end space-x-3">
      <button onclick="closeApprovalModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200">
        취소
      </button>
      <button onclick="${isApprove ? `approveExpense(${expenseId})` : `rejectExpense(${expenseId})`}" 
              class="px-4 py-2 ${isApprove ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'} text-white rounded-lg">
        ${isApprove ? '승인' : '반려'}
      </button>
    </div>
  `;
  
  document.getElementById('approval-modal').classList.remove('hidden');
}

function closeApprovalModal() {
  document.getElementById('approval-modal').classList.add('hidden');
}

async function approveExpense(expenseId) {
  try {
    const response = await fetch(`/api/v1/expenses/${expenseId}/approve`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeApprovalModal();
      loadExpenses();
    } else {
      showError(result.message || '지출 승인에 실패했습니다.');
    }
  } catch (error) {
    console.error('지출 승인 실패:', error);
    showError('지출 승인 중 오류가 발생했습니다.');
  }
}

async function rejectExpense(expenseId) {
  const reason = document.getElementById('rejection-reason').value.trim();
  
  try {
    const response = await fetch(`/api/v1/expenses/${expenseId}/reject`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ reason: reason })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      closeApprovalModal();
      loadExpenses();
    } else {
      showError(result.message || '지출 반려에 실패했습니다.');
    }
  } catch (error) {
    console.error('지출 반려 실패:', error);
    showError('지출 반려 중 오류가 발생했습니다.');
  }
}

async function markAsPaid(expenseId) {
  if (!confirm('이 지출을 지급 완료 처리하시겠습니까?')) return;
  
  try {
    const response = await fetch(`/api/v1/expenses/${expenseId}/mark_as_paid`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      loadExpenses();
    } else {
      showError(result.message || '지급 처리에 실패했습니다.');
    }
  } catch (error) {
    console.error('지급 처리 실패:', error);
    showError('지급 처리 중 오류가 발생했습니다.');
  }
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ko-KR');
}

function formatCurrency(amount) {
  return new Intl.NumberFormat('ko-KR', {
    style: 'currency',
    currency: 'KRW'
  }).format(amount);
}

function showSuccess(message) {
  // 성공 메시지 표시 (실제로는 toast로 구현)
  alert(message);
}

function showError(message) {
  // 에러 메시지 표시 (실제로는 toast로 구현)
  alert(message);
}
</script>