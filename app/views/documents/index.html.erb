<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
  <!-- 페이지 헤더 -->
  <div class="md:flex md:items-center md:justify-between">
    <div class="flex-1 min-w-0">
      <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
        📄 문서/전자결재
      </h2>
      <p class="mt-1 text-sm text-gray-500">
        문서 작성, 결재 요청 및 승인 처리
      </p>
    </div>
    <div class="mt-4 flex md:mt-0 md:ml-4">
      <button type="button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" onclick="openNewDocumentModal()">
        새 문서 작성
      </button>
    </div>
  </div>

  <!-- 필터 탭 -->
  <div class="mt-6">
    <div class="border-b border-gray-200">
      <nav class="-mb-px flex space-x-8">
        <a href="#" class="border-blue-500 text-blue-600 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" data-filter="all">
          전체 문서
        </a>
        <a href="#" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" data-filter="my">
          내 문서
        </a>
        <a href="#" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" data-filter="pending">
          결재 대기
        </a>
        <a href="#" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" data-filter="approved">
          승인 완료
        </a>
      </nav>
    </div>
    
    <!-- 문서 유형 및 상태 필터 -->
    <div class="mt-4 flex flex-wrap gap-2">
      <select id="document-type-filter" class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
        <option value="">모든 문서 유형</option>
        <option value="leave_request">휴가신청서</option>
        <option value="business_trip">출장신청서</option>
        <option value="purchase_request">구매요청서</option>
        <option value="work_report">업무보고서</option>
        <option value="meeting_minutes">회의록</option>
        <option value="proposal">제안서</option>
      </select>
      
      <select id="status-filter" class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
        <option value="">모든 상태</option>
        <option value="draft">작성중</option>
        <option value="pending">결재대기</option>
        <option value="approved">승인완료</option>
        <option value="rejected">반려</option>
      </select>
    </div>
  </div>

  <!-- 문서 목록 -->
  <div class="mt-8">
    <div class="bg-white shadow overflow-hidden sm:rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <div class="divide-y divide-gray-200" id="documents-list">
          <!-- 문서 항목들이 여기 동적으로 로드됩니다 -->
          <div class="py-4">
            <div class="flex items-center justify-center">
              <div class="text-sm text-gray-500">문서를 불러오는 중...</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 새 문서 작성 모달 -->
<div id="new-document-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-2/3 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">새 문서 작성</h3>
        <button type="button" class="text-gray-400 hover:text-gray-600" onclick="closeNewDocumentModal()">
          <span class="sr-only">닫기</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <form id="new-document-form" class="space-y-4">
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700">문서 제목</label>
            <input type="text" id="title" name="title" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
          </div>
          
          <div>
            <label for="document_type" class="block text-sm font-medium text-gray-700">문서 유형</label>
            <select id="document_type" name="document_type" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
              <option value="">문서 유형 선택</option>
              <option value="leave_request">휴가신청서</option>
              <option value="business_trip">출장신청서</option>
              <option value="purchase_request">구매요청서</option>
              <option value="work_report">업무보고서</option>
              <option value="meeting_minutes">회의록</option>
              <option value="proposal">제안서</option>
            </select>
          </div>
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="department" class="block text-sm font-medium text-gray-700">부서</label>
            <select id="department" name="department" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
              <option value="">부서 선택</option>
              <option value="의료진">의료진</option>
              <option value="간호부">간호부</option>
              <option value="행정부">행정부</option>
              <option value="시설관리">시설관리</option>
            </select>
          </div>
          
          <div>
            <label for="security_level" class="block text-sm font-medium text-gray-700">보안등급</label>
            <select id="security_level" name="security_level" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
              <option value="1">일반</option>
              <option value="2">대외비</option>
              <option value="3">비밀</option>
              <option value="4">극비</option>
            </select>
          </div>
        </div>
        
        <div>
          <label for="content" class="block text-sm font-medium text-gray-700">문서 내용</label>
          <textarea id="content" name="content" rows="8" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="문서 내용을 입력하세요..."></textarea>
        </div>
        
        <!-- 결재선 설정 -->
        <div class="border-t pt-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">결재선 설정</label>
          <div id="approval-line" class="space-y-2">
            <!-- 결재선 항목들이 여기 추가됩니다 -->
          </div>
          <button type="button" onclick="addApprover()" class="mt-2 inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            + 결재자 추가
          </button>
        </div>
        
        <div class="flex items-center justify-between pt-4 border-t">
          <div class="flex space-x-3">
            <button type="button" onclick="saveDraft()" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              임시저장
            </button>
            <button type="button" onclick="closeNewDocumentModal()" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              취소
            </button>
          </div>
          <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            결재 요청
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// 문서 목록 로드
let currentFilter = 'all';

async function loadDocuments(filter = 'all', documentType = '', status = '') {
  const token = localStorage.getItem('auth_token');
  if (!token) {
    window.location.href = '/login';
    return;
  }
  
  try {
    let url = 'http://localhost:7001/api/v1/documents';
    const params = new URLSearchParams();
    
    if (filter === 'my') params.append('my_documents', 'true');
    if (filter === 'pending') params.append('pending_approval', 'true');
    if (filter === 'approved') params.append('status', 'approved');
    if (documentType) params.append('document_type', documentType);
    if (status) params.append('status', status);
    
    if (params.toString()) url += '?' + params.toString();
      
    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      displayDocuments(data.data);
    } else {
      document.getElementById('documents-list').innerHTML = 
        '<div class="py-4"><div class="text-center text-sm text-red-600">문서를 불러올 수 없습니다.</div></div>';
    }
  } catch (error) {
    document.getElementById('documents-list').innerHTML = 
      '<div class="py-4"><div class="text-center text-sm text-red-600">API 연결 실패</div></div>';
  }
}

function displayDocuments(documents) {
  const listElement = document.getElementById('documents-list');
  
  if (documents.length === 0) {
    listElement.innerHTML = '<div class="py-4"><div class="text-center text-sm text-gray-500">문서가 없습니다.</div></div>';
    return;
  }
  
  listElement.innerHTML = documents.map(document => `
    <div class="py-4 hover:bg-gray-50 cursor-pointer" onclick="viewDocument(${document.id})">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <div class="flex items-center mb-2">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${document.status_color} mr-2">
              ${document.status_text}
            </span>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-purple-800 bg-purple-100 mr-2">
              ${document.document_type_text}
            </span>
            <span class="text-xs text-gray-500">${document.department}</span>
            <span class="text-xs text-gray-500 ml-2">${document.security_level_text}</span>
          </div>
          <h3 class="text-sm font-semibold text-gray-900 mb-1">
            ${document.title}
          </h3>
          <div class="flex items-center text-xs text-gray-500 space-x-4">
            <span>👤 ${document.author}</span>
            <span>📊 ${document.approval_progress}% 완료</span>
            ${document.current_approver ? `<span>👨‍💼 현재: ${document.current_approver}</span>` : ''}
            <span>📅 ${new Date(document.updated_at).toLocaleDateString('ko-KR')}</span>
          </div>
        </div>
        <div class="ml-4 flex-shrink-0">
          <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
    </div>
  `).join('');
}

function viewDocument(id) {
  window.location.href = `/documents/${id}`;
}

// 필터 탭 기능
document.querySelectorAll('[data-filter]').forEach(link => {
  link.addEventListener('click', function(e) {
    e.preventDefault();
    
    // 활성 탭 업데이트
    document.querySelectorAll('[data-filter]').forEach(l => {
      l.className = 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm';
    });
    this.className = 'border-blue-500 text-blue-600 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm';
    
    currentFilter = this.dataset.filter;
    loadDocuments(currentFilter);
  });
});

// 문서 유형/상태 필터
document.getElementById('document-type-filter').addEventListener('change', function() {
  const statusFilter = document.getElementById('status-filter').value;
  loadDocuments(currentFilter, this.value, statusFilter);
});

document.getElementById('status-filter').addEventListener('change', function() {
  const typeFilter = document.getElementById('document-type-filter').value;
  loadDocuments(currentFilter, typeFilter, this.value);
});

// 모달 관리
function openNewDocumentModal() {
  document.getElementById('new-document-modal').classList.remove('hidden');
}

function closeNewDocumentModal() {
  document.getElementById('new-document-modal').classList.add('hidden');
  document.getElementById('new-document-form').reset();
  document.getElementById('approval-line').innerHTML = '';
}

// 결재자 추가
let approverIndex = 0;
function addApprover() {
  const approvalLine = document.getElementById('approval-line');
  const approverDiv = document.createElement('div');
  approverDiv.className = 'flex items-center space-x-2';
  approverDiv.innerHTML = `
    <span class="text-sm text-gray-600">${approverIndex + 1}순위:</span>
    <select name="approvers[${approverIndex}][user_id]" class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
      <option value="">결재자 선택</option>
      <option value="1">관리자</option>
    </select>
    <button type="button" onclick="removeApprover(this)" class="text-red-600 hover:text-red-800">
      <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
  `;
  approvalLine.appendChild(approverDiv);
  approverIndex++;
}

function removeApprover(button) {
  button.parentElement.remove();
}

// 임시저장
async function saveDraft() {
  const token = localStorage.getItem('auth_token');
  const formData = new FormData(document.getElementById('new-document-form'));
  
  const documentData = {
    title: formData.get('title'),
    content: formData.get('content'),
    document_type: formData.get('document_type'),
    department: formData.get('department'),
    security_level: parseInt(formData.get('security_level'))
  };
  
  try {
    const response = await fetch('http://localhost:7001/api/v1/documents', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ document: documentData })
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      closeNewDocumentModal();
      loadDocuments(currentFilter);
      alert('문서가 임시저장되었습니다.');
    } else {
      alert('저장 실패: ' + (data.message || '알 수 없는 오류'));
    }
  } catch (error) {
    alert('API 연결 실패');
  }
}

// 새 문서 등록 (결재 요청)
document.getElementById('new-document-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const token = localStorage.getItem('auth_token');
  const formData = new FormData(e.target);
  
  const documentData = {
    title: formData.get('title'),
    content: formData.get('content'),
    document_type: formData.get('document_type'),
    department: formData.get('department'),
    security_level: parseInt(formData.get('security_level'))
  };
  
  // 결재자 정보 수집
  const approvers = [];
  const approverSelects = document.querySelectorAll('select[name^="approvers"]');
  approverSelects.forEach(select => {
    if (select.value) {
      approvers.push({ user_id: select.value });
    }
  });
  
  try {
    const response = await fetch('http://localhost:7001/api/v1/documents', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ document: documentData, approvers: approvers })
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      // 결재 요청
      if (approvers.length > 0) {
        await fetch(`http://localhost:7001/api/v1/documents/${data.data.id}/request_approval`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
      }
      
      closeNewDocumentModal();
      loadDocuments(currentFilter);
      alert('문서가 성공적으로 등록되고 결재 요청되었습니다.');
    } else {
      alert('등록 실패: ' + (data.message || '알 수 없는 오류'));
    }
  } catch (error) {
    alert('API 연결 실패');
  }
});

// 페이지 로드 시 문서 목록 로드
document.addEventListener('DOMContentLoaded', () => {
  loadDocuments();
});
</script>
