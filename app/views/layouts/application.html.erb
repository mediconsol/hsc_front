<!DOCTYPE html>
<html>
  <head>
    <title>병원 통합 관리 시스템</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload", "data-turbo-eval": "false" %>
  </head>

  <body class="bg-gray-50">
    <div class="min-h-screen flex">
      <!-- 사이드바 -->
      <div class="fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform -translate-x-full transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0" id="sidebar">
        <div class="flex items-center justify-center h-16 px-4 border-b border-gray-200">
          <h1 class="text-lg font-bold text-gray-900">🏥 병원 인트라넷</h1>
        </div>
        
        <nav class="mt-5 px-2">
          <div class="space-y-1">
            <!-- 홈 -->
            <a href="/" class="bg-blue-100 text-blue-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">🏠</span>
              홈
            </a>
            
            <!-- 인트라넷 핵심 기능들 -->
            <a href="/announcements" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">📢</span>
              공지사항
            </a>
            
            <a href="/boards" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">📋</span>
              부서별 게시판
            </a>
            
            <a href="/documents" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">📄</span>
              문서/전자결재
            </a>
            
            <a href="/hr" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">👨‍⚕️</span>
              인사/급여
            </a>
            
            <a href="#" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">💰</span>
              예산/재무
            </a>
            
            <a href="#" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
              <span class="mr-3">🏢</span>
              시설/자산
            </a>
            
            <!-- 구분선 -->
            <div class="border-t border-gray-200 my-4"></div>
            
            <!-- 향후 개발 예정 (회색 처리) -->
            <div class="text-xs font-medium text-gray-400 uppercase tracking-wider px-2 py-2">향후 개발 예정</div>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">📅</span>
              예약/접수
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">💬</span>
              상담/CRM
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">🩺</span>
              진료/검진
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">👥</span>
              환자관리
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">📦</span>
              재고/구매
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed">
              <span class="mr-3">📊</span>
              통계
            </a>
          </div>
        </nav>
        
        <!-- 사용자 정보 영역 -->
        <div class="absolute bottom-0 w-full p-4 border-t border-gray-200">
          <div class="flex items-center">
            <div class="flex-1">
              <span id="user-welcome" class="text-sm text-gray-600">환영합니다!</span>
              <div id="auth-buttons">
                <%= link_to "로그인", login_path, class: "text-blue-600 text-sm hover:text-blue-800" %>
              </div>
            </div>
            <div>
              <a href="#" class="text-gray-400 hover:text-gray-600">
                <span class="sr-only">설정</span>
                ⚙️
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- 모바일 오버레이 -->
      <div class="fixed inset-0 z-40 bg-gray-600 bg-opacity-75 transition-opacity duration-300 ease-linear lg:hidden hidden" id="sidebar-overlay"></div>

      <!-- 메인 콘텐츠 영역 -->
      <div class="flex-1 flex flex-col lg:ml-0">
        <!-- 상단 모바일 네비게이션 -->
        <div class="sticky top-0 z-10 bg-white pl-1 pt-1 sm:pl-3 sm:pt-3 lg:hidden">
          <button type="button" class="-ml-0.5 -mt-0.5 h-12 w-12 inline-flex items-center justify-center rounded-md text-gray-500 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500" id="sidebar-toggle">
            <span class="sr-only">사이드바 열기</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        <!-- 메인 콘텐츠 -->
        <main class="flex-1 relative z-0 overflow-y-auto focus:outline-none">
          <div class="py-6">
            <%= yield %>
          </div>
        </main>
      </div>
    </div>

    <!-- 토스트 알림 컨테이너 -->
    <div id="toast-container" class="toast-container"></div>

    <!-- 로딩 오버레이 -->
    <div id="loading-overlay" class="loading-overlay">
      <div class="loading-content">
        <div class="loading-spinner"></div>
        <div class="loading-text" id="loading-text">처리 중...</div>
      </div>
    </div>

    <script>
      // 토스트 알림 시스템
      class ToastManager {
        constructor() {
          this.container = document.getElementById('toast-container');
          this.toasts = [];
        }

        show(message, type = 'info', title = null, duration = 5000) {
          const toast = this.createToast(message, type, title, duration);
          this.container.appendChild(toast);
          
          // 애니메이션을 위한 지연
          setTimeout(() => {
            toast.classList.add('show');
          }, 10);

          // 자동 제거
          setTimeout(() => {
            this.removeToast(toast);
          }, duration);

          return toast;
        }

        createToast(message, type, title, duration) {
          const toast = document.createElement('div');
          toast.className = `toast toast-${type}`;
          
          const icons = {
            success: '✓',
            error: '✕',
            warning: '⚠',
            info: 'ℹ'
          };

          const icon = icons[type] || icons.info;
          
          toast.innerHTML = `
            <div class="toast-icon">${icon}</div>
            <div class="toast-content">
              ${title ? `<div class="toast-title">${title}</div>` : ''}
              <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="window.toast.removeToast(this.parentElement)">&times;</button>
          `;

          return toast;
        }

        removeToast(toast) {
          toast.classList.add('hide');
          setTimeout(() => {
            if (toast.parentNode) {
              toast.parentNode.removeChild(toast);
            }
          }, 300);
        }

        // 편의 메서드들
        success(message, title = null) {
          return this.show(message, 'success', title);
        }

        error(message, title = null) {
          return this.show(message, 'error', title || '오류');
        }

        warning(message, title = null) {
          return this.show(message, 'warning', title || '경고');
        }

        info(message, title = null) {
          return this.show(message, 'info', title || '알림');
        }
      }

      // 전역 토스트 인스턴스 생성
      window.toast = new ToastManager();

      // 로딩 관리자
      class LoadingManager {
        constructor() {
          this.overlay = document.getElementById('loading-overlay');
          this.textElement = document.getElementById('loading-text');
          this.isShowing = false;
        }

        show(message = '처리 중...') {
          this.textElement.textContent = message;
          this.overlay.classList.add('show');
          this.isShowing = true;
        }

        hide() {
          this.overlay.classList.remove('show');
          this.isShowing = false;
        }

        // 버튼 로딩 상태 관리
        setButtonLoading(button, loading = true) {
          if (loading) {
            button.classList.add('btn-loading');
            button.disabled = true;
          } else {
            button.classList.remove('btn-loading');
            button.disabled = false;
          }
        }

        // 데이터 영역 로딩 상태 관리
        showDataLoading(container, message = '데이터를 불러오는 중...') {
          container.innerHTML = `
            <div class="data-loading">
              <div class="data-loading-spinner"></div>
              <div class="data-loading-text">${message}</div>
            </div>
          `;
        }
      }

      // 전역 로딩 인스턴스 생성
      window.loading = new LoadingManager();

      // 폼 검증 관리자
      class FormValidator {
        constructor() {
          this.rules = {};
          this.debounceTimers = {};
        }

        // 검증 규칙 추가
        addRule(fieldName, rule) {
          if (!this.rules[fieldName]) {
            this.rules[fieldName] = [];
          }
          this.rules[fieldName].push(rule);
        }

        // 필드 검증
        validateField(field) {
          const fieldName = field.name;
          const value = field.value.trim();
          const fieldContainer = field.closest('.form-field') || field.parentElement;
          
          if (!this.rules[fieldName]) return true;

          // 검증 중 상태 표시
          this.setFieldState(fieldContainer, 'validating');

          let isValid = true;
          let errorMessage = '';

          for (const rule of this.rules[fieldName]) {
            const result = rule.validate(value);
            if (!result.valid) {
              isValid = false;
              errorMessage = result.message;
              break;
            }
          }

          // 결과 표시
          setTimeout(() => {
            if (isValid) {
              this.setFieldState(fieldContainer, 'valid');
            } else {
              this.setFieldState(fieldContainer, 'invalid', errorMessage);
            }
          }, 300); // 검증 중 효과를 위한 지연

          return isValid;
        }

        // 필드 상태 설정
        setFieldState(container, state, message = '') {
          container.classList.remove('valid', 'invalid', 'validating');
          
          if (state !== 'neutral') {
            container.classList.add(state);
          }

          const errorElement = container.querySelector('.field-error');
          const successElement = container.querySelector('.field-success');

          if (errorElement) errorElement.textContent = message;
          if (successElement && state === 'valid') {
            successElement.textContent = '입력이 올바릅니다';
          }
        }

        // 실시간 검증 이벤트 연결
        bindField(field, debounceMs = 500) {
          const fieldName = field.name;
          
          // 입력 이벤트
          field.addEventListener('input', (e) => {
            clearTimeout(this.debounceTimers[fieldName]);
            this.debounceTimers[fieldName] = setTimeout(() => {
              this.validateField(e.target);
            }, debounceMs);
          });

          // 포커스 해제 이벤트
          field.addEventListener('blur', (e) => {
            clearTimeout(this.debounceTimers[fieldName]);
            this.validateField(e.target);
          });
        }

        // 전체 폼 검증
        validateForm(form) {
          const fields = form.querySelectorAll('[name]');
          let isValid = true;

          fields.forEach(field => {
            if (!this.validateField(field)) {
              isValid = false;
            }
          });

          return isValid;
        }

        // 공통 검증 규칙들
        static rules = {
          required: (message = '필수 입력 항목입니다') => ({
            validate: (value) => ({
              valid: value.length > 0,
              message: message
            })
          }),

          minLength: (min, message = null) => ({
            validate: (value) => ({
              valid: value.length >= min,
              message: message || `최소 ${min}자 이상 입력해주세요`
            })
          }),

          maxLength: (max, message = null) => ({
            validate: (value) => ({
              valid: value.length <= max,
              message: message || `최대 ${max}자까지 입력 가능합니다`
            })
          }),

          email: (message = '올바른 이메일 형식을 입력해주세요') => ({
            validate: (value) => {
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              return {
                valid: value === '' || emailRegex.test(value),
                message: message
              };
            }
          }),

          phone: (message = '올바른 전화번호 형식을 입력해주세요') => ({
            validate: (value) => {
              const phoneRegex = /^[0-9\-\s()]+$/;
              return {
                valid: value === '' || phoneRegex.test(value),
                message: message
              };
            }
          }),

          korean: (message = '한글, 영문, 공백만 입력 가능합니다') => ({
            validate: (value) => {
              const koreanRegex = /^[가-힣a-zA-Z\s]*$/;
              return {
                valid: koreanRegex.test(value),
                message: message
              };
            }
          })
        }
      }

      // 전역 폼 검증 인스턴스 생성
      window.validator = new FormValidator();
      
    </script>
    
    <!-- API 및 UI 모듈 인라인 로드 -->
    <script>
      <%= File.read(Rails.root.join('app', 'assets', 'javascripts', 'modules', 'api.js')).html_safe %>
    </script>
    
    <script>
      <%= File.read(Rails.root.join('app', 'assets', 'javascripts', 'modules', 'ui-components.js')).html_safe %>
    </script>
    
    <!-- 모듈 인스턴스는 각 모듈에서 자동으로 생성됨 -->
    
    <script>
      // 로그인 상태 확인 및 UI 업데이트
      function updateAuthUI() {
        const token = localStorage.getItem('auth_token');
        const userInfo = localStorage.getItem('user_info');
        const welcomeSpan = document.getElementById('user-welcome');
        const authButtons = document.getElementById('auth-buttons');
        
        if (token && userInfo) {
          const user = JSON.parse(userInfo);
          welcomeSpan.textContent = `${user.name}님, 환영합니다!`;
          authButtons.innerHTML = `
            <span class="text-sm text-gray-600 mr-2">${user.role}</span>
            <button onclick="logout()" class="bg-red-600 text-white px-4 py-2 rounded-md text-sm hover:bg-red-700">
              로그아웃
            </button>
          `;
        }
      }
      
      // 로그아웃 함수
      function logout() {
        localStorage.removeItem('auth_token');
        localStorage.removeItem('user_info');
        window.location.href = '/login';
      }
      
      // 페이지 로드 시 인증 상태 확인
      document.addEventListener('DOMContentLoaded', updateAuthUI);
      
      // 모바일 사이드바 토글 기능
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('sidebar');
      const sidebarOverlay = document.getElementById('sidebar-overlay');
      
      if (sidebarToggle && sidebar && sidebarOverlay) {
        sidebarToggle.addEventListener('click', function() {
          sidebar.classList.toggle('-translate-x-full');
          sidebarOverlay.classList.toggle('hidden');
        });
        
        sidebarOverlay.addEventListener('click', function() {
          sidebar.classList.add('-translate-x-full');
          sidebarOverlay.classList.add('hidden');
        });
      }
    </script>
  </body>
</html>
