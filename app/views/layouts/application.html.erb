<!DOCTYPE html>
<html>
  <head>
    <title>병원 통합 관리 시스템</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    
    <%= stylesheet_link_tag "tailwind", "data-turbo-track": "reload" %>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Asset pipeline 활성화 -->
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload", "data-turbo-eval": "false" %>
    
    <style>
      /* 사이드바 스타일 */
      #sidebar {
        width: 16rem; /* 256px */
        transition: width 0.3s ease-in-out;
      }
      
      #sidebar[data-collapsed="true"] {
        width: 4rem; /* 64px */
      }
      
      #sidebar[data-collapsed="true"] .sidebar-text {
        display: none;
      }
      
      #sidebar[data-collapsed="true"] .sidebar-icon {
        margin-right: 0;
        display: block;
        text-align: center;
        width: 100%;
      }
      
      #sidebar[data-collapsed="true"] nav a {
        justify-content: center;
      }
      
      #sidebar[data-collapsed="true"] .border-t {
        margin: 0.5rem 0;
      }
      
      /* 토글 버튼 회전 */
      #sidebar[data-collapsed="true"] #sidebar-toggle-btn svg {
        transform: rotate(180deg);
      }
      
      /* 사용자 정보 영역 스타일 */
      #sidebar .flex-shrink-0:last-child {
        width: 100%;
        box-sizing: border-box;
      }
      
      #sidebar[data-collapsed="true"] .sidebar-text {
        display: none;
      }
      
      #sidebar[data-collapsed="true"] .sidebar-icon-only {
        display: flex !important;
      }
      
      #sidebar .sidebar-icon-only {
        display: none;
      }
      
      /* 사용자 영역 footer 스타일 */
      #sidebar .flex-shrink-0:last-child {
        background-color: #f9fafb; /* gray-50 */
        border-top: 2px solid #d1d5db; /* gray-300 */
      }
      
      #sidebar[data-collapsed="true"] .flex-shrink-0:last-child {
        background-color: #f3f4f6; /* gray-100 축소 시 조금 더 어둡게 */
      }
      
      /* 축소 모드에서 로그아웃 버튼 아이콘 스타일 */
      #sidebar[data-collapsed="true"] .sidebar-icon-only.logout-mode {
        background-color: #ef4444; /* red-500 */
        border-radius: 50%;
      }
      
      #sidebar[data-collapsed="true"] .sidebar-icon-only.logout-mode:hover {
        background-color: #dc2626; /* red-600 */
      }
      
      /* 모바일에서는 항상 전체 너비 */
      @media (max-width: 1024px) {
        #sidebar {
          width: 16rem !important;
          transform: translateX(-100%);
        }
        
        #sidebar.sidebar-open {
          transform: translateX(0);
        }
        
        #sidebar[data-collapsed="true"] .sidebar-text {
          display: block;
        }
        
        #sidebar[data-collapsed="true"] .sidebar-icon {
          margin-right: 0.75rem;
        }
        
        #sidebar[data-collapsed="true"] .sidebar-icon-only {
          display: none !important;
        }
      }

      /* AI 사이드바 스타일 */
      #ai-sidebar {
        width: 20rem; /* 320px */
        transition: width 0.3s ease-in-out, transform 0.3s ease-in-out;
      }
      
      #ai-sidebar[data-hidden="true"] {
        transform: translateX(100%);
      }
      
      /* 모바일에서 AI 사이드바 */
      @media (max-width: 1024px) {
        #ai-sidebar {
          width: 20rem !important;
          transform: translateX(100%);
        }
        
        #ai-sidebar.ai-sidebar-open {
          transform: translateX(0);
        }
      }
    </style>
  </head>

  <body class="bg-gray-50">
    <div class="min-h-screen flex">
      <!-- 사이드바 -->
      <div class="fixed inset-y-0 left-0 z-50 bg-white shadow-lg transition-all duration-300 ease-in-out lg:fixed lg:inset-y-0 flex flex-col" id="sidebar" data-collapsed="false">
        <div class="flex items-center justify-between h-16 px-4 border-b border-gray-200 flex-shrink-0">
          <h1 class="text-lg font-bold text-gray-900 sidebar-text">🏥 병원 인트라넷</h1>
          <button onclick="toggleSidebar()" class="hidden lg:block p-1 rounded hover:bg-gray-100 transition-transform duration-300" id="sidebar-toggle-btn">
            <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
        </div>
        
        <nav class="mt-5 px-2 flex-1 overflow-y-auto">
          <div class="space-y-1">
            <!-- 홈 -->
            <a href="/dashboard" class="bg-blue-100 text-blue-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="대시보드">
              <span class="sidebar-icon mr-3">🏠</span>
              <span class="sidebar-text">대시보드</span>
            </a>
            
            <!-- 인트라넷 핵심 기능들 -->
            <a href="/announcements" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="공지사항">
              <span class="sidebar-icon mr-3">📢</span>
              <span class="sidebar-text">공지사항</span>
            </a>
            
            <a href="/boards" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="부서별 게시판">
              <span class="sidebar-icon mr-3">📋</span>
              <span class="sidebar-text">부서별 게시판</span>
            </a>
            
            <a href="/documents" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="문서/전자결재">
              <span class="sidebar-icon mr-3">📄</span>
              <span class="sidebar-text">문서/전자결재</span>
            </a>
            
            <a href="/hr" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="인사/급여">
              <span class="sidebar-icon mr-3">👨‍⚕️</span>
              <span class="sidebar-text">인사/급여</span>
            </a>
            
            <a href="/appointments" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="예약/접수">
              <span class="sidebar-icon mr-3">📅</span>
              <span class="sidebar-text">예약/접수</span>
            </a>
            
            <a href="/patients" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="환자관리">
              <span class="sidebar-icon mr-3">👥</span>
              <span class="sidebar-text">환자관리</span>
            </a>
            
            <a href="/finance" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="예산/재무">
              <span class="sidebar-icon mr-3">💰</span>
              <span class="sidebar-text">예산/재무</span>
            </a>
            
            <a href="/facilities" class="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md" title="시설/자산">
              <span class="sidebar-icon mr-3">🏢</span>
              <span class="sidebar-text">시설/자산</span>
            </a>
            
            <!-- 구분선 -->
            <div class="border-t border-gray-200 my-4"></div>
            
            <!-- 향후 개발 예정 (회색 처리) -->
            <div class="text-xs font-medium text-gray-400 uppercase tracking-wider px-2 py-2 sidebar-text">향후 개발 예정</div>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed" title="상담/CRM">
              <span class="sidebar-icon mr-3">💬</span>
              <span class="sidebar-text">상담/CRM</span>
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed" title="진료/검진">
              <span class="sidebar-icon mr-3">🩺</span>
              <span class="sidebar-text">진료/검진</span>
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed" title="재고/구매">
              <span class="sidebar-icon mr-3">📦</span>
              <span class="sidebar-text">재고/구매</span>
            </a>
            
            <a href="#" class="text-gray-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md cursor-not-allowed" title="통계">
              <span class="sidebar-icon mr-3">📊</span>
              <span class="sidebar-text">통계</span>
            </a>
          </div>
        </nav>
        
        <!-- 사용자 정보 영역 (Footer) -->
        <div class="flex-shrink-0 mt-auto border-t-2 border-gray-300 bg-gray-50">
          <div class="px-2 py-3">
            <!-- 사용자 환영 메시지 -->
            <div class="sidebar-text group flex items-center px-2 py-2 text-sm rounded-md mb-1">
              <span class="sidebar-icon mr-3">👤</span>
              <div class="flex-1 min-w-0">
                <span id="user-welcome" class="text-gray-700 block truncate font-medium">환영합니다!</span>
              </div>
            </div>
            
            <!-- 로그인/로그아웃 버튼 -->
            <div id="auth-buttons" class="sidebar-text mb-2">
              <%= link_to login_path, class: "text-gray-700 hover:bg-white hover:text-blue-600 hover:shadow-sm group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-all duration-200" do %>
                <span class="sidebar-icon mr-3">🔑</span>
                <span class="sidebar-text">로그인</span>
              <% end %>
            </div>
            
            <!-- 버전 정보 -->
            <div class="sidebar-text border-t border-gray-200 pt-2">
              <div class="px-2 py-1 text-center">
                <span class="text-xs text-gray-500 font-mono">Hospital System v.2.38.1</span>
              </div>
            </div>
          </div>
          
          <!-- 축소 모드 아이콘 -->
          <div class="sidebar-icon-only hidden justify-center items-center py-4" id="collapsed-user-icon">
            <a href="#" class="text-gray-600 hover:text-gray-800 hover:bg-white rounded-full p-2 transition-all duration-200" title="사용자 메뉴">
              <span class="text-xl">👤</span>
            </a>
          </div>
        </div>
      </div>

      <!-- 모바일 오버레이 -->
      <div class="fixed inset-0 z-40 bg-gray-600 bg-opacity-75 transition-opacity duration-300 ease-linear lg:hidden hidden" id="sidebar-overlay"></div>

      <!-- 메인 콘텐츠 영역 -->
      <div class="flex-1 flex flex-col lg:ml-64" id="main-content">
        <!-- 상단 모바일 네비게이션 -->
        <div class="sticky top-0 z-10 bg-white pl-1 pt-1 sm:pl-3 sm:pt-3 lg:hidden">
          <button type="button" class="-ml-0.5 -mt-0.5 h-12 w-12 inline-flex items-center justify-center rounded-md text-gray-500 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500" id="sidebar-toggle">
            <span class="sr-only">사이드바 열기</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        <!-- 메인 콘텐츠 -->
        <main class="flex-1 relative z-0 overflow-y-auto focus:outline-none">
          <div class="py-6">
            <%= yield %>
          </div>
        </main>
      </div>

      <!-- AI 사이드바 -->
      <div class="fixed inset-y-0 right-0 z-50 bg-white shadow-lg transition-all duration-300 ease-in-out lg:fixed lg:inset-y-0 flex flex-col border-l border-gray-200" id="ai-sidebar" data-hidden="true">
        <!-- AI 사이드바 헤더 -->
        <div class="h-16 px-4 border-b border-gray-200 flex-shrink-0 transition-all duration-500" id="ai-sidebar-header">
          <!-- 페르소나 선택 영역 -->
          <div class="flex items-center justify-between h-full">
            <div class="flex items-center space-x-3 flex-1">
              <!-- 페르소나 아바타 -->
              <div class="w-10 h-10 rounded-full flex items-center justify-center text-xl transition-all duration-300" id="persona-avatar">
                🤖
              </div>
              
              <!-- 페르소나 정보 -->
              <div class="flex-1 min-w-0">
                <div class="relative">
                  <select 
                    id="persona-selector" 
                    class="appearance-none bg-transparent text-white font-bold text-sm cursor-pointer focus:outline-none pr-6 w-full"
                    onchange="changePersona(this.value)"
                  >
                    <option value="default" data-icon="🤖" data-color="from-purple-600 to-blue-600">AI 어시스턴트</option>
                    <option value="doctor" data-icon="🩺" data-color="from-green-600 to-emerald-600">닥터 김</option>
                    <option value="nurse" data-icon="👩‍⚕️" data-color="from-pink-500 to-rose-500">간호사 이</option>
                    <option value="manager" data-icon="💼" data-color="from-indigo-600 to-blue-600">매니저 박</option>
                    <option value="tech" data-icon="🔧" data-color="from-gray-600 to-slate-600">테키</option>
                  </select>
                  <div class="absolute inset-y-0 right-0 flex items-center pointer-events-none">
                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
                <div class="flex items-center space-x-1">
                  <p class="text-xs text-white text-opacity-80 truncate" id="persona-title">일반 AI 어시스턴트</p>
                  <div class="relative">
                    <div class="w-3 h-3 bg-white bg-opacity-20 rounded-full flex items-center justify-center cursor-help hover:bg-opacity-30 transition-all duration-200" id="persona-info-icon">
                      <span class="text-xs text-white font-bold">?</span>
                    </div>
                    <!-- 툴팁 -->
                    <div class="absolute top-full right-0 mt-2 w-64 p-3 bg-gray-900 text-white text-xs rounded-lg shadow-lg opacity-0 invisible transition-all duration-200 z-50" id="persona-tooltip">
                      <div class="absolute bottom-full right-4 border-4 border-transparent border-b-gray-900"></div>
                      <div id="persona-tooltip-content">
                        <!-- 툴팁 내용이 여기에 동적으로 생성됩니다 -->
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- 헤더 액션 버튼들 -->
            <div class="flex items-center space-x-2 ml-2">
              <!-- 새 대화 버튼 -->
              <button 
                onclick="startNewConversation()" 
                class="p-1 rounded hover:bg-white hover:bg-opacity-20 transition-all duration-200 group relative"
                title="새 대화 시작 (Ctrl+Shift+N)"
              >
                <svg class="w-4 h-4 text-white group-hover:text-opacity-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <!-- 작은 새로고침 아이콘을 오버레이 -->
                <div class="absolute -bottom-0.5 -right-0.5 w-2 h-2 bg-white rounded-full flex items-center justify-center">
                  <svg class="w-1.5 h-1.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                  </svg>
                </div>
              </button>
              
              <!-- 닫기 버튼 -->
              <button onclick="toggleAISidebar()" class="p-1 rounded hover:bg-white hover:bg-opacity-20 transition-all duration-200" id="ai-sidebar-close-btn">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        </div>
        
        <!-- 채팅 영역 -->
        <div class="flex-1 flex flex-col">
          <!-- 메시지 목록 -->
          <div class="flex-1 overflow-y-auto p-4 relative" id="ai-chat-messages">
            <div class="space-y-4">
              <!-- 환영 메시지 -->
              <div class="flex items-start space-x-2">
                <div class="w-8 h-8 persona-default rounded-full flex items-center justify-center flex-shrink-0">
                  <span class="text-white text-sm">🤖</span>
                </div>
                <div class="flex-1">
                  <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
                    <p class="text-sm text-gray-800">안녕하세요! HSC1 병원 관리 시스템의 AI 어시스턴트입니다. 무엇을 도와드릴까요?</p>
                  </div>
                  <div class="text-xs text-gray-500 mt-1">방금 전</div>
                </div>
              </div>
            </div>
            
            <!-- 스크롤 인디케이터 -->
            <div class="scroll-indicator" id="scroll-indicator">새 메시지 ↓</div>
          </div>
          
          <!-- 입력 영역 -->
          <div class="border-t border-gray-200 p-4 bg-gray-50">
            <div class="flex space-x-2">
              <input 
                type="text" 
                placeholder="메시지를 입력하세요..." 
                class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm"
                id="ai-chat-input"
                onkeypress="handleChatInput(event)"
              >
              <button 
                onclick="sendChatMessage()" 
                class="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all duration-200 flex items-center justify-center"
                id="ai-chat-send-btn"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
            
            <!-- 빠른 액션 버튼들 -->
            <div class="mt-3 flex flex-wrap gap-2 items-center justify-between">
              <div class="flex flex-wrap gap-2" id="quick-actions">
                <button onclick="sendQuickMessage('환자 정보 검색')" class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs hover:bg-blue-200 transition-colors">
                  환자 정보 검색
                </button>
                <button onclick="sendQuickMessage('오늘 일정 확인')" class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-xs hover:bg-green-200 transition-colors">
                  오늘 일정 확인
                </button>
                <button onclick="sendQuickMessage('통계 요약')" class="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-xs hover:bg-purple-200 transition-colors">
                  통계 요약
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- AI 사이드바 토글 버튼 (우하단 고정) -->
      <button 
        onclick="toggleAISidebar()" 
        class="fixed bottom-6 right-6 z-40 w-14 h-14 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center"
        id="ai-sidebar-toggle-btn"
        title="AI 어시스턴트"
      >
        <span class="text-xl">🤖</span>
      </button>
    </div>

    <!-- 토스트 알림 컨테이너 -->
    <div id="toast-container" class="toast-container"></div>

    <!-- 로딩 오버레이 -->
    <div id="loading-overlay" class="loading-overlay">
      <div class="loading-content">
        <div class="loading-spinner"></div>
        <div class="loading-text" id="loading-text">처리 중...</div>
      </div>
    </div>

    <script>
      // 토스트 알림 시스템
      class ToastManager {
        constructor() {
          this.container = document.getElementById('toast-container');
          this.toasts = [];
        }

        show(message, type = 'info', title = null, duration = 5000) {
          const toast = this.createToast(message, type, title, duration);
          this.container.appendChild(toast);
          
          // 애니메이션을 위한 지연
          setTimeout(() => {
            toast.classList.add('show');
          }, 10);

          // 자동 제거
          setTimeout(() => {
            this.removeToast(toast);
          }, duration);

          return toast;
        }

        createToast(message, type, title, duration) {
          const toast = document.createElement('div');
          toast.className = `toast toast-${type}`;
          
          const icons = {
            success: '✓',
            error: '✕',
            warning: '⚠',
            info: 'ℹ'
          };

          const icon = icons[type] || icons.info;
          
          toast.innerHTML = `
            <div class="toast-icon">${icon}</div>
            <div class="toast-content">
              ${title ? `<div class="toast-title">${title}</div>` : ''}
              <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="window.toast.removeToast(this.parentElement)">&times;</button>
          `;

          return toast;
        }

        removeToast(toast) {
          toast.classList.add('hide');
          setTimeout(() => {
            if (toast.parentNode) {
              toast.parentNode.removeChild(toast);
            }
          }, 300);
        }

        // 편의 메서드들
        success(message, title = null) {
          return this.show(message, 'success', title);
        }

        error(message, title = null) {
          return this.show(message, 'error', title || '오류');
        }

        warning(message, title = null) {
          return this.show(message, 'warning', title || '경고');
        }

        info(message, title = null) {
          return this.show(message, 'info', title || '알림');
        }
      }

      // 전역 토스트 인스턴스 생성
      window.toast = new ToastManager();

      // 로딩 관리자
      class LoadingManager {
        constructor() {
          this.overlay = document.getElementById('loading-overlay');
          this.textElement = document.getElementById('loading-text');
          this.isShowing = false;
        }

        show(message = '처리 중...') {
          this.textElement.textContent = message;
          this.overlay.classList.add('show');
          this.isShowing = true;
        }

        hide() {
          this.overlay.classList.remove('show');
          this.isShowing = false;
        }

        // 버튼 로딩 상태 관리
        setButtonLoading(button, loading = true) {
          if (loading) {
            button.classList.add('btn-loading');
            button.disabled = true;
          } else {
            button.classList.remove('btn-loading');
            button.disabled = false;
          }
        }

        // 데이터 영역 로딩 상태 관리
        showDataLoading(container, message = '데이터를 불러오는 중...') {
          container.innerHTML = `
            <div class="data-loading">
              <div class="data-loading-spinner"></div>
              <div class="data-loading-text">${message}</div>
            </div>
          `;
        }
      }

      // 전역 로딩 인스턴스 생성
      window.loading = new LoadingManager();

      // 폼 검증 관리자
      class FormValidator {
        constructor() {
          this.rules = {};
          this.debounceTimers = {};
        }

        // 검증 규칙 추가
        addRule(fieldName, rule) {
          if (!this.rules[fieldName]) {
            this.rules[fieldName] = [];
          }
          this.rules[fieldName].push(rule);
        }

        // 필드 검증
        validateField(field) {
          const fieldName = field.name;
          const value = field.value.trim();
          const fieldContainer = field.closest('.form-field') || field.parentElement;
          
          if (!this.rules[fieldName]) return true;

          // 검증 중 상태 표시
          this.setFieldState(fieldContainer, 'validating');

          let isValid = true;
          let errorMessage = '';

          for (const rule of this.rules[fieldName]) {
            const result = rule.validate(value);
            if (!result.valid) {
              isValid = false;
              errorMessage = result.message;
              break;
            }
          }

          // 결과 표시
          setTimeout(() => {
            if (isValid) {
              this.setFieldState(fieldContainer, 'valid');
            } else {
              this.setFieldState(fieldContainer, 'invalid', errorMessage);
            }
          }, 300); // 검증 중 효과를 위한 지연

          return isValid;
        }

        // 필드 상태 설정
        setFieldState(container, state, message = '') {
          container.classList.remove('valid', 'invalid', 'validating');
          
          if (state !== 'neutral') {
            container.classList.add(state);
          }

          const errorElement = container.querySelector('.field-error');
          const successElement = container.querySelector('.field-success');

          if (errorElement) errorElement.textContent = message;
          if (successElement && state === 'valid') {
            successElement.textContent = '입력이 올바릅니다';
          }
        }

        // 실시간 검증 이벤트 연결
        bindField(field, debounceMs = 500) {
          const fieldName = field.name;
          
          // 입력 이벤트
          field.addEventListener('input', (e) => {
            clearTimeout(this.debounceTimers[fieldName]);
            this.debounceTimers[fieldName] = setTimeout(() => {
              this.validateField(e.target);
            }, debounceMs);
          });

          // 포커스 해제 이벤트
          field.addEventListener('blur', (e) => {
            clearTimeout(this.debounceTimers[fieldName]);
            this.validateField(e.target);
          });
        }

        // 전체 폼 검증
        validateForm(form) {
          const fields = form.querySelectorAll('[name]');
          let isValid = true;

          fields.forEach(field => {
            if (!this.validateField(field)) {
              isValid = false;
            }
          });

          return isValid;
        }

        // 공통 검증 규칙들
        static rules = {
          required: (message = '필수 입력 항목입니다') => ({
            validate: (value) => ({
              valid: value.length > 0,
              message: message
            })
          }),

          minLength: (min, message = null) => ({
            validate: (value) => ({
              valid: value.length >= min,
              message: message || `최소 ${min}자 이상 입력해주세요`
            })
          }),

          maxLength: (max, message = null) => ({
            validate: (value) => ({
              valid: value.length <= max,
              message: message || `최대 ${max}자까지 입력 가능합니다`
            })
          }),

          email: (message = '올바른 이메일 형식을 입력해주세요') => ({
            validate: (value) => {
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              return {
                valid: value === '' || emailRegex.test(value),
                message: message
              };
            }
          }),

          phone: (message = '올바른 전화번호 형식을 입력해주세요') => ({
            validate: (value) => {
              const phoneRegex = /^[0-9\-\s()]+$/;
              return {
                valid: value === '' || phoneRegex.test(value),
                message: message
              };
            }
          }),

          korean: (message = '한글, 영문, 공백만 입력 가능합니다') => ({
            validate: (value) => {
              const koreanRegex = /^[가-힣a-zA-Z\s]*$/;
              return {
                valid: koreanRegex.test(value),
                message: message
              };
            }
          })
        }
      }

      // 전역 폼 검증 인스턴스 생성
      window.validator = new FormValidator();
      
    </script>
    
    <!-- 환경 변수 설정 -->
    <script>
      window.BACKEND_API_URL = '<%= ENV.fetch("BACKEND_API_URL", "http://localhost:7001/api/v1") %>';
    </script>

    <!-- API 및 UI 모듈 인라인 로드 -->
    <script>
      <%= File.read(Rails.root.join('app', 'assets', 'javascripts', 'modules', 'api.js')).html_safe %>
    </script>
    
    <script>
      <%= File.read(Rails.root.join('app', 'assets', 'javascripts', 'modules', 'ui-components.js')).html_safe %>
    </script>
    
    <script>
      <%= File.read(Rails.root.join('app', 'assets', 'javascripts', 'modules', 'auth.js')).html_safe %>
    </script>
    
    <!-- 모듈 인스턴스는 각 모듈에서 자동으로 생성됨 -->
    
    <script>
      // 로그인 상태 확인 및 UI 업데이트
      function updateAuthUI() {
        const token = localStorage.getItem('auth_token');
        const userInfo = localStorage.getItem('user_info');
        const welcomeSpan = document.getElementById('user-welcome');
        const authButtons = document.getElementById('auth-buttons');
        
        if (token && userInfo) {
          try {
            const user = JSON.parse(userInfo);
            const roleDisplay = window.authManager ? window.authManager.getRoleDisplayName(user.role) : '직원';
            
            welcomeSpan.textContent = `${user.name || '사용자'}님, 환영합니다!`;
            authButtons.innerHTML = `
              <button onclick="logout()" class="bg-red-500 text-white hover:bg-red-600 hover:shadow-md group flex items-center justify-center px-2 py-2 text-sm font-medium rounded-md w-full transition-all duration-200">
                <span class="sidebar-text font-semibold">로그아웃</span>
              </button>
              <div class="mt-2 px-2 py-1 sidebar-text text-center">
                <span class="text-xs text-gray-500 font-medium">${roleDisplay}</span>
              </div>
            `;
            
            // 축소 모드 아이콘도 로그아웃 버튼으로 업데이트
            const collapsedIcon = document.getElementById('collapsed-user-icon');
            if (collapsedIcon) {
              collapsedIcon.innerHTML = `
                <button onclick="logout()" class="text-white bg-red-500 hover:bg-red-600 rounded-full p-2 transition-all duration-200 logout-mode" title="로그아웃">
                  <span class="text-sm font-bold">OUT</span>
                </button>
              `;
              collapsedIcon.classList.add('logout-mode');
            }
          } catch (error) {
            console.error('사용자 정보 파싱 오류:', error);
            showLoginButton();
          }
        } else {
          showLoginButton();
        }
      }
      
      function showLoginButton() {
        const welcomeSpan = document.getElementById('user-welcome');
        const authButtons = document.getElementById('auth-buttons');
        welcomeSpan.textContent = '로그인이 필요합니다';
        authButtons.innerHTML = `
          <a href="/login" class="text-gray-700 hover:bg-white hover:text-blue-600 hover:shadow-sm group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-all duration-200">
            <span class="sidebar-icon mr-3">🔑</span>
            <span class="sidebar-text">로그인</span>
          </a>
        `;
        
        // 축소 모드 아이콘을 기본 상태로 복원
        const collapsedIcon = document.getElementById('collapsed-user-icon');
        if (collapsedIcon) {
          collapsedIcon.innerHTML = `
            <a href="#" class="text-gray-600 hover:text-gray-800 hover:bg-white rounded-full p-2 transition-all duration-200" title="사용자 메뉴">
              <span class="text-xl">👤</span>
            </a>
          `;
          collapsedIcon.classList.remove('logout-mode');
        }
      }
      
      // 로그아웃 함수
      async function logout() {
        if (window.authManager) {
          await window.authManager.logout();
        } else {
          localStorage.removeItem('auth_token');
          localStorage.removeItem('user_info');
        }
        window.location.href = '/login';
      }
      
      // 페이지 로드 시 인증 상태 확인
      document.addEventListener('DOMContentLoaded', function() {
        updateAuthUI();
        highlightCurrentPage();
      });
      
      // 현재 페이지에 해당하는 사이드바 메뉴 하이라이트
      function highlightCurrentPage() {
        const currentPath = window.location.pathname;
        const sidebarLinks = document.querySelectorAll('nav a[href]');
        
        // 모든 링크에서 active 클래스 제거
        sidebarLinks.forEach(link => {
          link.classList.remove('bg-blue-100', 'text-blue-900');
          link.classList.add('text-gray-600', 'hover:bg-gray-50', 'hover:text-gray-900');
        });
        
        // 현재 페이지에 해당하는 링크에 active 클래스 추가
        sidebarLinks.forEach(link => {
          const href = link.getAttribute('href');
          
          // 정확한 경로 매칭 또는 경로가 포함된 경우 (대시보드는 정확히 매칭)
          if (currentPath === href || (href !== '/dashboard' && href !== '#' && currentPath.startsWith(href))) {
            link.classList.remove('text-gray-600', 'hover:bg-gray-50', 'hover:text-gray-900');
            link.classList.add('bg-blue-100', 'text-blue-900');
          }
        });
        
        // 대시보드가 기본 활성화될 경우 처리
        if (currentPath === '/' || currentPath === '') {
          const dashboardLink = document.querySelector('nav a[href="/dashboard"]');
          if (dashboardLink) {
            dashboardLink.classList.remove('text-gray-600', 'hover:bg-gray-50', 'hover:text-gray-900');
            dashboardLink.classList.add('bg-blue-100', 'text-blue-900');
          }
        }
      }
      
      // 사이드바 토글 기능 (데스크톱)
      function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('main-content');
        const isCollapsed = sidebar.getAttribute('data-collapsed') === 'true';
        
        if (isCollapsed) {
          sidebar.setAttribute('data-collapsed', 'false');
          mainContent.classList.remove('lg:ml-16');
          mainContent.classList.add('lg:ml-64');
          localStorage.setItem('sidebar-collapsed', 'false');
        } else {
          sidebar.setAttribute('data-collapsed', 'true');
          mainContent.classList.remove('lg:ml-64');
          mainContent.classList.add('lg:ml-16');
          localStorage.setItem('sidebar-collapsed', 'true');
        }
      }
      
      // 페이지 로드 시 사이드바 상태 복원
      document.addEventListener('DOMContentLoaded', function() {
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('main-content');
        const savedState = localStorage.getItem('sidebar-collapsed');
        
        if (savedState === 'true') {
          sidebar.setAttribute('data-collapsed', 'true');
          mainContent.classList.remove('lg:ml-64');
          mainContent.classList.add('lg:ml-16');
        }
      });
      
      // 모바일 사이드바 토글 기능
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('sidebar');
      const sidebarOverlay = document.getElementById('sidebar-overlay');
      
      if (sidebarToggle && sidebar && sidebarOverlay) {
        sidebarToggle.addEventListener('click', function() {
          sidebar.classList.toggle('sidebar-open');
          sidebarOverlay.classList.toggle('hidden');
        });
        
        sidebarOverlay.addEventListener('click', function() {
          sidebar.classList.remove('sidebar-open');
          sidebarOverlay.classList.add('hidden');
        });
      }

      // AI 사이드바 관리자
      class AIChatManager {
        constructor() {
          this.chatMessages = document.getElementById('ai-chat-messages');
          this.chatInput = document.getElementById('ai-chat-input');
          this.sendButton = document.getElementById('ai-chat-send-btn');
          this.scrollIndicator = document.getElementById('scroll-indicator');
          this.isLoading = false;
          this.isUserScrolling = false;
          this.lastScrollTop = 0;
          this.currentPersona = 'default';
          this.currentSessionId = this.generateSessionId();
          this.conversationHistory = [];
          
          this.initializeScrollFeatures();
          this.initializePersona();
          this.restoreState(); // 상태 복원
          this.loadConversationHistory();
        }
        
        // 페르소나 초기화
        initializePersona() {
          // 저장된 페르소나 불러오기
          const savedPersona = localStorage.getItem('ai-persona') || 'default';
          this.setPersona(savedPersona, false);
        }
        
        // 페르소나 설정
        setPersona(persona, showWelcome = true) {
          // 현재 상태 저장
          if (this.currentPersona !== persona) {
            this.saveState();
          }
          
          this.currentPersona = persona;
          localStorage.setItem('ai-persona', persona);
          
          // UI 업데이트
          this.updatePersonaUI(persona);
          
          // 빠른 액션 버튼 업데이트
          this.updateQuickActions(persona);
          
          // 새로운 세션 ID 생성
          this.currentSessionId = this.generateSessionId();
          
          // 페르소나별 대화 기록 로드
          this.loadConversationHistory();
          
          // 환영 메시지 (페르소나 변경 시)
          if (showWelcome) {
            this.showPersonaWelcome(persona);
          }
        }
        
        // 페르소나 UI 업데이트
        updatePersonaUI(persona) {
          const avatarEl = document.getElementById('persona-avatar');
          const headerEl = document.getElementById('ai-sidebar-header');
          const titleEl = document.getElementById('persona-title');
          const selectorEl = document.getElementById('persona-selector');
          
          if (!avatarEl || !headerEl || !titleEl || !selectorEl) return;
          
          // 페르소나 정보
          const personas = {
            default: { 
              icon: '🤖', 
              title: '일반 AI 어시스턴트', 
              class: 'persona-default',
              description: `
                <div class="space-y-2">
                  <div class="font-semibold text-purple-300">🤖 일반 AI 어시스턴트</div>
                  <div class="text-gray-300">병원 업무 전반에 대한 도움을 제공하는 범용 AI입니다.</div>
                  <div class="space-y-1">
                    <div class="text-yellow-300 font-medium">주요 기능:</div>
                    <ul class="list-disc list-inside space-y-1 text-gray-300">
                      <li>시스템 사용법 안내</li>
                      <li>업무 프로세스 질문 답변</li>
                      <li>일반적인 병원 관리 상담</li>
                      <li>기본적인 정보 검색 지원</li>
                    </ul>
                  </div>
                </div>
              `
            },
            doctor: { 
              icon: '🩺', 
              title: '의료 전문 어시스턴트', 
              class: 'persona-doctor',
              description: `
                <div class="space-y-2">
                  <div class="font-semibold text-green-300">🩺 닥터 김</div>
                  <div class="text-gray-300">친근하면서도 전문적인 의료진 관점의 조언을 제공합니다.</div>
                  <div class="space-y-1">
                    <div class="text-yellow-300 font-medium">전문 분야:</div>
                    <ul class="list-disc list-inside space-y-1 text-gray-300">
                      <li>진료 프로세스 가이드</li>
                      <li>의학 정보 제공 (일반적인 내용)</li>
                      <li>환자 상담 방법론</li>
                      <li>의료진 간 협업 방안</li>
                    </ul>
                  </div>
                  <div class="text-blue-300 text-xs">💡 "환자분들을 위해서라면~", "의학적으로 보면요~" 같은 따뜻한 말투를 사용합니다.</div>
                </div>
              `
            },
            nurse: { 
              icon: '👩‍⚕️', 
              title: '간호 케어 어시스턴트', 
              class: 'persona-nurse',
              description: `
                <div class="space-y-2">
                  <div class="font-semibold text-pink-300">👩‍⚕️ 간호사 이</div>
                  <div class="text-gray-300">따뜻하고 세심한 간호사의 마음으로 실무적인 도움을 드립니다.</div>
                  <div class="space-y-1">
                    <div class="text-yellow-300 font-medium">전문 분야:</div>
                    <ul class="list-disc list-inside space-y-1 text-gray-300">
                      <li>환자 케어 및 간호 업무</li>
                      <li>일정 관리 및 업무 조율</li>
                      <li>응급 상황 대처법</li>
                      <li>간호 체크리스트 및 프로토콜</li>
                    </ul>
                  </div>
                  <div class="text-blue-300 text-xs">💡 "걱정하지 마세요~", "제가 도와드릴게요!" 같은 배려심 깊은 말투를 사용합니다.</div>
                </div>
              `
            },
            manager: { 
              icon: '💼', 
              title: '업무 관리 어시스턴트', 
              class: 'persona-manager',
              description: `
                <div class="space-y-2">
                  <div class="font-semibold text-orange-300">💼 매니저 박</div>
                  <div class="text-gray-300">효율적이고 체계적인 관리자 관점에서 업무 최적화를 지원합니다.</div>
                  <div class="space-y-1">
                    <div class="text-yellow-300 font-medium">전문 분야:</div>
                    <ul class="list-disc list-inside space-y-1 text-gray-300">
                      <li>업무 관리 및 프로세스 개선</li>
                      <li>통계 분석 및 성과 측정</li>
                      <li>시스템 운영 및 최적화</li>
                      <li>직원 관리 및 조직 운영</li>
                    </ul>
                  </div>
                  <div class="text-blue-300 text-xs">💡 "업무 효율을 위해", "시스템적으로 접근하면" 같은 논리적인 말투를 사용합니다.</div>
                </div>
              `
            },
            tech: { 
              icon: '🔧', 
              title: '기술 지원 어시스턴트', 
              class: 'persona-tech',
              description: `
                <div class="space-y-2">
                  <div class="font-semibold text-gray-300">🔧 테키</div>
                  <div class="text-gray-300">똑똑하고 논리적인 IT 전문가로서 기술적 문제해결을 도와드립니다.</div>
                  <div class="space-y-1">
                    <div class="text-yellow-300 font-medium">전문 분야:</div>
                    <ul class="list-disc list-inside space-y-1 text-gray-300">
                      <li>시스템 사용법 및 기술 지원</li>
                      <li>문제 진단 및 해결</li>
                      <li>데이터 분석 및 보고서</li>
                      <li>IT 인프라 및 보안</li>
                    </ul>
                  </div>
                  <div class="text-blue-300 text-xs">💡 "기술적으로는", "데이터를 보면" 같은 정확하고 명확한 말투를 사용합니다.</div>
                </div>
              `
            }
          };
          
          const personaInfo = personas[persona] || personas.default;
          
          // 애니메이션 효과
          avatarEl.classList.add('persona-transition');
          setTimeout(() => avatarEl.classList.remove('persona-transition'), 600);
          
          // 아바타 및 텍스트 업데이트
          avatarEl.textContent = personaInfo.icon;
          titleEl.textContent = personaInfo.title;
          selectorEl.value = persona;
          
          // 툴팁 내용 업데이트
          const tooltipContent = document.getElementById('persona-tooltip-content');
          if (tooltipContent) {
            tooltipContent.innerHTML = personaInfo.description;
          }
          
          // 클래스 업데이트
          headerEl.className = `h-16 px-4 border-b border-gray-200 flex-shrink-0 transition-all duration-500 ${personaInfo.class}`;
          avatarEl.className = `w-10 h-10 rounded-full flex items-center justify-center text-xl transition-all duration-300 ${personaInfo.class}`;
        }
        
        // 빠른 액션 버튼 업데이트
        updateQuickActions(persona) {
          const quickActionsEl = document.getElementById('quick-actions');
          if (!quickActionsEl) return;
          
          const actionSets = {
            default: [
              { text: '환자 정보 검색', message: '환자 정보 검색', color: 'blue' },
              { text: '오늘 일정 확인', message: '오늘 일정 확인', color: 'green' },
              { text: '통계 요약', message: '통계 요약', color: 'purple' }
            ],
            doctor: [
              { text: '진료 가이드', message: '진료 관련 가이드를 알려주세요', color: 'green' },
              { text: '의학 정보', message: '의학 정보를 검색해주세요', color: 'emerald' },
              { text: '환자 상담', message: '환자 상담 방법을 알려주세요', color: 'teal' }
            ],
            nurse: [
              { text: '간호 체크리스트', message: '간호 업무 체크리스트를 보여주세요', color: 'pink' },
              { text: '환자 케어', message: '환자 케어 방법을 알려주세요', color: 'rose' },
              { text: '응급 상황', message: '응급 상황 대처법을 알려주세요', color: 'red' }
            ],
            manager: [
              { text: '업무 관리', message: '업무 관리 방법을 알려주세요', color: 'indigo' },
              { text: '성과 분석', message: '성과 분석 리포트를 생성해주세요', color: 'blue' },
              { text: '직원 관리', message: '직원 관리 가이드를 알려주세요', color: 'violet' }
            ],
            tech: [
              { text: '시스템 사용법', message: '시스템 사용법을 알려주세요', color: 'gray' },
              { text: '기술 지원', message: '기술적 문제를 해결해주세요', color: 'slate' },
              { text: '오류 진단', message: '시스템 오류를 진단해주세요', color: 'zinc' }
            ]
          };
          
          const actions = actionSets[persona] || actionSets.default;
          
          quickActionsEl.innerHTML = actions.map(action => 
            `<button onclick="sendQuickMessage('${action.message}')" class="px-3 py-1 bg-${action.color}-100 text-${action.color}-700 rounded-full text-xs hover:bg-${action.color}-200 transition-colors">
              ${action.text}
            </button>`
          ).join('');
        }
        
        // 페르소나 환영 메시지
        showPersonaWelcome(persona) {
          const welcomeMessages = {
            default: '안녕하세요! 일반 AI 어시스턴트입니다. 무엇을 도와드릴까요?',
            doctor: '안녕하세요! 닥터 김입니다. 의료 관련 질문이 있으시면 언제든 말씀해주세요. 👩‍⚕️',
            nurse: '안녕하세요! 간호사 이입니다. 환자 케어와 간호 업무에 대해 도움을 드릴게요! 💕',
            manager: '안녕하세요! 매니저 박입니다. 효율적인 업무 관리를 위해 최선을 다하겠습니다. 📊',
            tech: '안녕하세요! 테키입니다. 기술적인 문제나 시스템 관련 질문을 해결해드리겠습니다. ⚙️'
          };
          
          const message = welcomeMessages[persona] || welcomeMessages.default;
          this.addMessage(message, false);
        }
        
        // 스크롤 기능 초기화
        initializeScrollFeatures() {
          if (!this.chatMessages) return;
          
          // 스크롤 이벤트 리스너
          this.chatMessages.addEventListener('scroll', () => {
            this.handleScroll();
          });
          
          // 스크롤 인디케이터 클릭 이벤트
          if (this.scrollIndicator) {
            this.scrollIndicator.addEventListener('click', () => {
              this.scrollToBottom(true);
            });
          }
          
          // 마우스 휠 감지
          this.chatMessages.addEventListener('wheel', () => {
            this.isUserScrolling = true;
            clearTimeout(this.scrollTimeout);
            this.scrollTimeout = setTimeout(() => {
              this.isUserScrolling = false;
            }, 1000);
          });
        }
        
        // 스크롤 이벤트 처리
        handleScroll() {
          const scrollTop = this.chatMessages.scrollTop;
          const scrollHeight = this.chatMessages.scrollHeight;
          const clientHeight = this.chatMessages.clientHeight;
          const isAtBottom = scrollTop + clientHeight >= scrollHeight - 10;
          
          // 스크롤 인디케이터 표시/숨김
          if (this.scrollIndicator) {
            if (!isAtBottom && !this.isLoading) {
              this.scrollIndicator.classList.add('show');
            } else {
              this.scrollIndicator.classList.remove('show');
            }
          }
          
          this.lastScrollTop = scrollTop;
        }

        // Markdown 렌더링 함수
        renderMarkdown(content) {
          try {
            // marked.js를 사용하여 markdown을 HTML로 변환
            const rendered = marked.parse(content, {
              breaks: true,        // 줄바꿈을 <br>로 변환
              gfm: true,          // GitHub Flavored Markdown 지원
              sanitize: false,    // HTML 태그 허용 (DOMPurify 사용 권장)
              smartypants: true   // 따옴표, 대시 등을 타이포그래피 문자로 변환
            });
            
            // 기본적인 XSS 방지 (간단한 스크립트 태그 제거)
            return rendered.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
          } catch (error) {
            console.error('Markdown rendering error:', error);
            // 에러 발생 시 원본 텍스트 반환
            return content.replace(/</g, '&lt;').replace(/>/g, '&gt;');
          }
        }

        // 메시지 추가
        addMessage(content, isUser = false) {
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          const messageElement = document.createElement('div');
          
          if (isUser) {
            messageElement.innerHTML = `
              <div class="flex items-start space-x-2 justify-end">
                <div class="flex-1 max-w-xs">
                  <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg p-3">
                    <p class="text-sm">${content}</p>
                  </div>
                  <div class="text-xs text-gray-500 mt-1 text-right">방금 전</div>
                </div>
                <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0">
                  <span class="text-gray-600 text-sm">👤</span>
                </div>
              </div>
            `;
          } else {
            // 현재 페르소나 정보 가져오기
            const personas = {
              default: { icon: '🤖', class: 'persona-default' },
              doctor: { icon: '🩺', class: 'persona-doctor' },
              nurse: { icon: '👩‍⚕️', class: 'persona-nurse' },
              manager: { icon: '💼', class: 'persona-manager' },
              tech: { icon: '🔧', class: 'persona-tech' }
            };
            
            const personaInfo = personas[this.currentPersona] || personas.default;
            
            messageElement.innerHTML = `
              <div class="flex items-start space-x-2">
                <div class="w-8 h-8 ${personaInfo.class} rounded-full flex items-center justify-center flex-shrink-0">
                  <span class="text-white text-sm">${personaInfo.icon}</span>
                </div>
                <div class="flex-1">
                  <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
                    <div class="markdown-content text-sm text-gray-800">${this.renderMarkdown(content)}</div>
                  </div>
                  <div class="text-xs text-gray-500 mt-1">방금 전</div>
                </div>
              </div>
            `;
          }
          
          messageContainer.appendChild(messageElement);
          this.scrollToBottom();
        }

        // 로딩 메시지 표시
        showLoadingMessage() {
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          const loadingElement = document.createElement('div');
          loadingElement.className = 'ai-loading-message';
          
          const personas = {
            default: { icon: '🤖', class: 'persona-default' },
            doctor: { icon: '🩺', class: 'persona-doctor' },
            nurse: { icon: '👩‍⚕️', class: 'persona-nurse' },
            manager: { icon: '💼', class: 'persona-manager' },
            tech: { icon: '🔧', class: 'persona-tech' }
          };
          
          const personaInfo = personas[this.currentPersona] || personas.default;
          
          loadingElement.innerHTML = `
            <div class="flex items-start space-x-2">
              <div class="w-8 h-8 ${personaInfo.class} rounded-full flex items-center justify-center flex-shrink-0">
                <span class="text-white text-sm">${personaInfo.icon}</span>
              </div>
              <div class="flex-1">
                <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
                  <div class="flex items-center space-x-2">
                    <div class="typing-indicator">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                    <span class="text-sm text-gray-600">생각하는 중...</span>
                  </div>
                </div>
              </div>
            </div>
          `;
          
          messageContainer.appendChild(loadingElement);
          this.scrollToBottom();
          return loadingElement;
        }

        // 로딩 메시지 제거
        removeLoadingMessage() {
          const loadingMessage = this.chatMessages.querySelector('.ai-loading-message');
          if (loadingMessage) {
            loadingMessage.remove();
          }
        }

        // 스크롤을 하단으로 (개선된 버전)
        scrollToBottom(force = false) {
          if (!this.chatMessages) return;
          
          // 사용자가 스크롤 중이고 강제가 아니면 자동 스크롤 안함
          if (this.isUserScrolling && !force) return;
          
          // 부드러운 스크롤
          const scrollOptions = {
            top: this.chatMessages.scrollHeight,
            behavior: force ? 'auto' : 'smooth'
          };
          
          this.chatMessages.scrollTo(scrollOptions);
          
          // 스크롤 인디케이터 숨김
          if (this.scrollIndicator) {
            this.scrollIndicator.classList.remove('show');
          }
        }
        
        // 특정 메시지로 스크롤
        scrollToMessage(messageElement) {
          if (!messageElement || !this.chatMessages) return;
          
          messageElement.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
          
          // 메시지 하이라이트 효과
          messageElement.style.backgroundColor = 'rgba(147, 51, 234, 0.1)';
          setTimeout(() => {
            messageElement.style.backgroundColor = '';
          }, 2000);
        }
        
        // 메시지 영역 높이 자동 조정
        adjustHeight() {
          if (!this.chatMessages) return;
          
          const aiSidebar = document.getElementById('ai-sidebar');
          const sidebarHeight = aiSidebar ? aiSidebar.clientHeight : 0;
          const headerHeight = 64; // 헤더 높이
          const inputHeight = 120; // 입력 영역 높이
          
          const maxHeight = sidebarHeight - headerHeight - inputHeight;
          this.chatMessages.style.maxHeight = `${maxHeight}px`;
        }

        // 대화 기록 로드
        async loadConversationHistory() {
          try {
            const response = await fetch(`${window.BACKEND_API_URL}/conversation_histories/recent_context?persona=${this.currentPersona}&limit=20`, {
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
              }
            });

            if (response.ok) {
              const data = await response.json();
              this.conversationHistory = data.data || [];
              this.renderConversationHistory();
            }
          } catch (error) {
            console.error('Failed to load conversation history:', error);
          }
        }

        // 대화 기록 렌더링
        renderConversationHistory() {
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          
          // 기존 메시지 제거 (환영 메시지 제외하고)
          const existingMessages = messageContainer.querySelectorAll('.message-history');
          existingMessages.forEach(msg => msg.remove());
          
          // 최근 5개 메시지만 표시
          const recentMessages = this.conversationHistory.slice(-10);
          
          recentMessages.forEach(history => {
            const messageElement = document.createElement('div');
            messageElement.className = 'message-history';
            
            if (history.message_type === 'user') {
              messageElement.innerHTML = `
                <div class="flex items-start space-x-2 justify-end">
                  <div class="flex-1 max-w-xs">
                    <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg p-3">
                      <p class="text-sm">${history.content}</p>
                    </div>
                    <div class="text-xs text-gray-500 mt-1 text-right">${this.formatTimestamp(history.timestamp)}</div>
                  </div>
                  <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0">
                    <span class="text-gray-600 text-sm">👤</span>
                  </div>
                </div>
              `;
            } else {
              const personas = {
                default: { icon: '🤖', class: 'persona-default' },
                doctor: { icon: '🩺', class: 'persona-doctor' },
                nurse: { icon: '👩‍⚕️', class: 'persona-nurse' },
                manager: { icon: '💼', class: 'persona-manager' },
                tech: { icon: '🔧', class: 'persona-tech' }
              };
              
              const personaInfo = personas[history.persona] || personas.default;
              
              messageElement.innerHTML = `
                <div class="flex items-start space-x-2">
                  <div class="w-8 h-8 ${personaInfo.class} rounded-full flex items-center justify-center flex-shrink-0">
                    <span class="text-white text-sm">${personaInfo.icon}</span>
                  </div>
                  <div class="flex-1">
                    <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
                      <p class="text-sm text-gray-800">${history.content}</p>
                    </div>
                    <div class="text-xs text-gray-500 mt-1">${this.formatTimestamp(history.timestamp)}</div>
                  </div>
                </div>
              `;
            }
            
            messageContainer.appendChild(messageElement);
          });
          
          this.scrollToBottom();
        }

        // 타임스탬프 포맷팅
        formatTimestamp(timestamp) {
          const date = new Date(timestamp);
          const now = new Date();
          const diffInMinutes = Math.floor((now - date) / (1000 * 60));
          
          if (diffInMinutes < 1) return '방금 전';
          if (diffInMinutes < 60) return `${diffInMinutes}분 전`;
          if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}시간 전`;
          
          return date.toLocaleDateString('ko-KR', {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
        }

        // 세션 ID 생성
        generateSessionId() {
          return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        }

        // 메시지 전송
        async sendMessage(message) {
          if (!message.trim() || this.isLoading) return;

          this.isLoading = true;
          this.updateSendButton(true);
          
          // 사용자 메시지 추가
          this.addMessage(message, true);
          this.chatInput.value = '';
          
          // 로딩 메시지 표시
          const loadingElement = this.showLoadingMessage();
          
          try {
            const response = await fetch(`${window.BACKEND_API_URL}/ai/chat`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
              },
              body: JSON.stringify({ 
                message: message,
                persona: this.currentPersona,
                session_id: this.currentSessionId
              })
            });

            if (!response.ok) {
              throw new Error('AI 서비스에 연결할 수 없습니다.');
            }

            const data = await response.json();
            
            // 세션 ID 업데이트
            if (data.session_id) {
              this.currentSessionId = data.session_id;
            }
            
            // 로딩 메시지 제거
            this.removeLoadingMessage();
            
            // AI 응답 추가
            this.addMessage(data.response || '죄송합니다. 응답을 생성할 수 없습니다.');
            
            // 상태 저장
            this.saveState();
            
          } catch (error) {
            console.error('AI Chat Error:', error);
            this.removeLoadingMessage();
            this.addMessage('죄송합니다. 현재 AI 서비스를 이용할 수 없습니다. 잠시 후 다시 시도해주세요.');
          } finally {
            this.isLoading = false;
            this.updateSendButton(false);
          }
        }

        // 새 대화 시작
        startNewConversation() {
          // 새 세션 ID 생성
          this.currentSessionId = this.generateSessionId();
          
          // 채팅 영역 초기화
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          messageContainer.innerHTML = `
            <!-- 환영 메시지 -->
            <div class="flex items-start space-x-2">
              <div class="w-8 h-8 persona-default rounded-full flex items-center justify-center flex-shrink-0">
                <span class="text-white text-sm">🤖</span>
              </div>
              <div class="flex-1">
                <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
                  <p class="text-sm text-gray-800">새로운 대화를 시작합니다! 무엇을 도와드릴까요?</p>
                </div>
                <div class="text-xs text-gray-500 mt-1">방금 전</div>
              </div>
            </div>
          `;
          
          // 스크롤 최적화
          this.scrollToBottom(true);
          
          // 토스트 알림
          if (window.toast) {
            window.toast.success('새로운 대화가 시작되었습니다.');
          }
        }

        // 전송 버튼 상태 업데이트
        updateSendButton(loading) {
          if (loading) {
            this.sendButton.disabled = true;
            this.sendButton.innerHTML = `
              <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            `;
          } else {
            this.sendButton.disabled = false;
            this.sendButton.innerHTML = `
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
            `;
          }
        }

        // localStorage에 상태 저장
        saveState() {
          try {
            const state = {
              currentPersona: this.currentPersona,
              currentSessionId: this.currentSessionId,
              messages: this.getDisplayedMessages(),
              timestamp: Date.now()
            };
            
            const stateKey = `ai-chat-state-${this.currentPersona}`;
            localStorage.setItem(stateKey, JSON.stringify(state));
          } catch (error) {
            console.error('Failed to save chat state:', error);
          }
        }

        // localStorage에서 상태 복원
        restoreState() {
          try {
            const stateKey = `ai-chat-state-${this.currentPersona}`;
            const savedState = localStorage.getItem(stateKey);
            
            if (savedState) {
              const state = JSON.parse(savedState);
              
              // 상태가 24시간 이내의 것인지 확인
              const dayAgo = Date.now() - (24 * 60 * 60 * 1000);
              if (state.timestamp > dayAgo) {
                this.currentSessionId = state.currentSessionId || this.generateSessionId();
                this.restoreMessages(state.messages || []);
              }
            }
          } catch (error) {
            console.error('Failed to restore chat state:', error);
          }
        }

        // 현재 표시된 메시지 가져오기
        getDisplayedMessages() {
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          const messages = [];
          
          messageContainer.querySelectorAll('.message-history, div').forEach(element => {
            const isUser = element.querySelector('.justify-end');
            const isAI = element.querySelector('.persona-default, .persona-doctor, .persona-nurse, .persona-manager, .persona-tech');
            
            if (isUser || isAI) {
              const contentEl = isUser ? 
                element.querySelector('.bg-gradient-to-r p') :
                element.querySelector('.markdown-content, .text-sm.text-gray-800');
              
              if (contentEl) {
                messages.push({
                  content: contentEl.textContent || contentEl.innerHTML,
                  isUser: !!isUser,
                  persona: this.currentPersona,
                  timestamp: Date.now()
                });
              }
            }
          });
          
          return messages;
        }

        // 메시지 복원
        restoreMessages(messages) {
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          messageContainer.innerHTML = '';
          
          messages.forEach(msg => {
            this.addMessage(msg.content, msg.isUser);
          });
          
          this.scrollToBottom();
        }

        // 페르소나 변경 시 세션 저장 및 복원
        changePersona(newPersona) {
          // 현재 상태 저장
          this.saveState();
          
          // 페르소나 변경
          this.currentPersona = newPersona;
          this.currentSessionId = this.generateSessionId();
          
          // 새 페르소나 상태 복원
          this.restoreState();
          
          // 대화 기록이 없으면 환영 메시지 표시
          const messageContainer = this.chatMessages.querySelector('.space-y-4');
          if (messageContainer.children.length === 0) {
            this.showPersonaWelcome(newPersona);
          }
          
          this.updatePersonaUI(newPersona);
          this.updateQuickActions(newPersona);
        }
      }

      // 전역 AI 채팅 인스턴스 생성
      window.aiChat = new AIChatManager();

      // AI 사이드바 토글 함수
      function toggleAISidebar() {
        const aiSidebar = document.getElementById('ai-sidebar');
        const isHidden = aiSidebar.getAttribute('data-hidden') === 'true';
        
        if (isHidden) {
          aiSidebar.setAttribute('data-hidden', 'false');
          localStorage.setItem('ai-sidebar-hidden', 'false');
          
          // 사이드바가 열릴 때 높이 조정 및 스크롤 최적화
          setTimeout(() => {
            if (window.aiChat) {
              window.aiChat.adjustHeight();
              window.aiChat.scrollToBottom(true);
            }
          }, 300);
        } else {
          aiSidebar.setAttribute('data-hidden', 'true');
          localStorage.setItem('ai-sidebar-hidden', 'true');
        }
      }

      // 채팅 메시지 전송 함수
      function sendChatMessage() {
        const input = document.getElementById('ai-chat-input');
        const message = input.value.trim();
        if (message && window.aiChat) {
          window.aiChat.sendMessage(message);
        }
      }

      // 엔터키로 메시지 전송
      function handleChatInput(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
          event.preventDefault();
          sendChatMessage();
        }
      }

      // 빠른 메시지 전송
      function sendQuickMessage(message) {
        if (window.aiChat) {
          window.aiChat.sendMessage(message);
        }
      }
      
      // 페르소나 변경
      function changePersona(persona) {
        if (window.aiChat) {
          window.aiChat.changePersona(persona);
        }
      }
      
      // 새 대화 시작
      function startNewConversation() {
        if (window.aiChat) {
          window.aiChat.startNewConversation();
        }
      }

      // 페이지 로드 시 AI 사이드바 상태 복원
      document.addEventListener('DOMContentLoaded', function() {
        const aiSidebar = document.getElementById('ai-sidebar');
        const savedState = localStorage.getItem('ai-sidebar-hidden');
        
        if (savedState === 'false') {
          aiSidebar.setAttribute('data-hidden', 'false');
          setTimeout(() => {
            if (window.aiChat) {
              window.aiChat.adjustHeight();
            }
          }, 100);
        }
        
        // 키보드 단축키 추가
        document.addEventListener('keydown', function(e) {
          // Ctrl + Shift + A: AI 사이드바 토글
          if (e.ctrlKey && e.shiftKey && e.key === 'A') {
            e.preventDefault();
            toggleAISidebar();
          }
          
          // Ctrl + Shift + N: 새 대화 시작
          if (e.ctrlKey && e.shiftKey && e.key === 'N') {
            e.preventDefault();
            const aiSidebar = document.getElementById('ai-sidebar');
            if (aiSidebar && aiSidebar.getAttribute('data-hidden') === 'false') {
              startNewConversation();
            }
          }
          
          // ESC: AI 사이드바 닫기
          if (e.key === 'Escape') {
            const aiSidebar = document.getElementById('ai-sidebar');
            if (aiSidebar && aiSidebar.getAttribute('data-hidden') === 'false') {
              toggleAISidebar();
            }
          }
        });
        
        // 창 크기 변경 시 높이 조정
        window.addEventListener('resize', function() {
          if (window.aiChat) {
            window.aiChat.adjustHeight();
          }
        });
        
        // 페르소나 정보 툴팁 이벤트
        const infoIcon = document.getElementById('persona-info-icon');
        const tooltip = document.getElementById('persona-tooltip');
        
        if (infoIcon && tooltip) {
          let tooltipTimeout;
          
          infoIcon.addEventListener('mouseenter', function() {
            clearTimeout(tooltipTimeout);
            tooltip.classList.remove('opacity-0', 'invisible');
            tooltip.classList.add('opacity-100', 'visible');
          });
          
          infoIcon.addEventListener('mouseleave', function() {
            tooltipTimeout = setTimeout(() => {
              tooltip.classList.remove('opacity-100', 'visible');
              tooltip.classList.add('opacity-0', 'invisible');
            }, 300);
          });
          
          // 툴팁에 마우스가 올라가면 사라지지 않도록
          tooltip.addEventListener('mouseenter', function() {
            clearTimeout(tooltipTimeout);
          });
          
          tooltip.addEventListener('mouseleave', function() {
            tooltip.classList.remove('opacity-100', 'visible');
            tooltip.classList.add('opacity-0', 'invisible');
          });
        }
      });
    </script>

    <!-- AI 채팅 스타일 -->
    <style>
      /* 타이핑 인디케이터 애니메이션 */
      .typing-indicator {
        display: flex;
        align-items: center;
        space-x: 1px;
      }
      
      .typing-indicator span {
        height: 4px;
        width: 4px;
        background: #9ca3af;
        border-radius: 50%;
        display: inline-block;
        margin-right: 2px;
        animation: typing 1.4s infinite ease-in-out;
      }
      
      .typing-indicator span:nth-child(1) {
        animation-delay: -0.32s;
      }
      
      .typing-indicator span:nth-child(2) {
        animation-delay: -0.16s;
      }
      
      @keyframes typing {
        0%, 80%, 100% {
          transform: scale(0.8);
          opacity: 0.5;
        }
        40% {
          transform: scale(1);
          opacity: 1;
        }
      }
      
      /* AI 채팅 메시지 영역 스크롤 개선 */
      #ai-chat-messages {
        max-height: calc(100vh - 200px); /* 화면 높이에 맞춰 조정 */
        overflow-y: auto;
        overflow-x: hidden;
        scroll-behavior: smooth; /* 부드러운 스크롤 */
        scrollbar-width: thin; /* Firefox 지원 */
        scrollbar-color: #cbd5e1 #f1f5f9; /* Firefox 지원 */
      }
      
      /* 스크롤바 스타일 (Chrome, Safari, Edge) */
      #ai-chat-messages::-webkit-scrollbar {
        width: 8px;
      }
      
      #ai-chat-messages::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
        margin: 4px 0;
      }
      
      #ai-chat-messages::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #cbd5e1, #94a3b8);
        border-radius: 4px;
        border: 1px solid #e2e8f0;
        transition: all 0.2s ease;
      }
      
      #ai-chat-messages::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #94a3b8, #64748b);
        transform: scale(1.1);
      }
      
      #ai-chat-messages::-webkit-scrollbar-thumb:active {
        background: linear-gradient(to bottom, #64748b, #475569);
      }
      
      /* 스크롤 페이드 효과 */
      #ai-chat-messages::before {
        content: '';
        position: sticky;
        top: 0;
        left: 0;
        right: 0;
        height: 10px;
        background: linear-gradient(to bottom, white, transparent);
        z-index: 1;
        pointer-events: none;
      }
      
      #ai-chat-messages::after {
        content: '';
        position: sticky;
        bottom: 0;
        left: 0;
        right: 0;
        height: 10px;
        background: linear-gradient(to top, white, transparent);
        z-index: 1;
        pointer-events: none;
      }
      
      /* 모바일에서 스크롤 최적화 */
      @media (max-width: 768px) {
        #ai-chat-messages {
          max-height: calc(100vh - 250px);
          -webkit-overflow-scrolling: touch; /* iOS 부드러운 스크롤 */
        }
        
        #ai-chat-messages::-webkit-scrollbar {
          width: 6px;
        }
      }
      
      /* 스크롤 인디케이터 */
      .scroll-indicator {
        position: absolute;
        right: 12px;
        bottom: 80px;
        background: rgba(147, 51, 234, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        opacity: 0;
        transform: translateY(10px);
        transition: all 0.3s ease;
        pointer-events: none;
        z-index: 10;
      }
      
      .scroll-indicator.show {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* 페르소나별 헤더 스타일 */
      .persona-default { background: linear-gradient(to right, #9333ea, #2563eb); }
      .persona-doctor { background: linear-gradient(to right, #059669, #047857); }
      .persona-nurse { background: linear-gradient(to right, #ec4899, #e11d48); }
      .persona-manager { background: linear-gradient(to right, #ea580c, #dc2626); }
      .persona-tech { background: linear-gradient(to right, #4b5563, #374151); }
      
      /* 페르소나별 메시지 아이콘 스타일 */
      .persona-default { background: linear-gradient(135deg, #a855f7, #3b82f6); }
      .persona-doctor { background: linear-gradient(135deg, #10b981, #059669); }
      .persona-nurse { background: linear-gradient(135deg, #f472b6, #ec4899); }
      .persona-manager { background: linear-gradient(135deg, #ea580c, #dc2626); }
      .persona-tech { background: linear-gradient(135deg, #6b7280, #4b5563); }
      
      /* 페르소나 아바타 스타일 */
      #persona-avatar.persona-default { background: linear-gradient(135deg, #a855f7, #3b82f6); }
      #persona-avatar.persona-doctor { background: linear-gradient(135deg, #10b981, #059669); }
      #persona-avatar.persona-nurse { background: linear-gradient(135deg, #f472b6, #ec4899); }
      #persona-avatar.persona-manager { background: linear-gradient(135deg, #ea580c, #dc2626); }
      #persona-avatar.persona-tech { background: linear-gradient(135deg, #6b7280, #4b5563); }
      
      /* Markdown 컨텐츠 스타일 */
      .markdown-content {
        line-height: 1.6;
      }
      
      .markdown-content h1,
      .markdown-content h2,
      .markdown-content h3,
      .markdown-content h4,
      .markdown-content h5,
      .markdown-content h6 {
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
        color: #1f2937;
      }
      
      .markdown-content h1 { font-size: 1.5rem; }
      .markdown-content h2 { font-size: 1.3rem; }
      .markdown-content h3 { font-size: 1.1rem; }
      .markdown-content h4,
      .markdown-content h5,
      .markdown-content h6 { font-size: 1rem; }
      
      .markdown-content p {
        margin-bottom: 0.75rem;
      }
      
      .markdown-content ul,
      .markdown-content ol {
        margin: 0.5rem 0;
        padding-left: 1.5rem;
      }
      
      .markdown-content li {
        margin-bottom: 0.25rem;
      }
      
      .markdown-content code {
        background-color: #f3f4f6;
        color: #e11d48;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-family: 'Courier New', monospace;
        font-size: 0.85em;
      }
      
      .markdown-content pre {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 0.75rem 0;
        overflow-x: auto;
        line-height: 1.4;
      }
      
      .markdown-content pre code {
        background-color: transparent;
        color: #374151;
        padding: 0;
        border-radius: 0;
        font-size: 0.875rem;
      }
      
      .markdown-content blockquote {
        border-left: 4px solid #e5e7eb;
        padding-left: 1rem;
        margin: 0.75rem 0;
        font-style: italic;
        color: #6b7280;
      }
      
      .markdown-content strong {
        font-weight: 600;
        color: #111827;
      }
      
      .markdown-content em {
        font-style: italic;
      }
      
      .markdown-content a {
        color: #2563eb;
        text-decoration: underline;
      }
      
      .markdown-content a:hover {
        color: #1d4ed8;
      }
      
      .markdown-content table {
        width: 100%;
        border-collapse: collapse;
        margin: 0.75rem 0;
      }
      
      .markdown-content th,
      .markdown-content td {
        border: 1px solid #e5e7eb;
        padding: 0.5rem;
        text-align: left;
      }
      
      .markdown-content th {
        background-color: #f9fafb;
        font-weight: 600;
      }
      
      /* 페르소나 전환 애니메이션 */
      .persona-transition {
        animation: personaChange 0.6s ease-in-out;
      }
      
      @keyframes personaChange {
        0% { transform: scale(1) rotate(0deg); opacity: 1; }
        50% { transform: scale(1.1) rotate(180deg); opacity: 0.7; }
        100% { transform: scale(1) rotate(360deg); opacity: 1; }
      }
      
      /* 페르소나 셀렉터 드롭다운 스타일 */
      #persona-selector {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 6px;
        color: white;
        font-weight: bold;
        padding: 4px 8px;
      }
      
      #persona-selector:hover {
        background: rgba(255, 255, 255, 0.15);
      }
      
      #persona-selector:focus {
        outline: none;
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.4);
      }
      
      /* 드롭다운 옵션 스타일 */
      #persona-selector option {
        background: #1f2937 !important; /* 어두운 배경 */
        color: #f9fafb !important; /* 밝은 글씨 */
        padding: 8px 12px !important;
        border: none !important;
        font-weight: 500 !important;
      }
      
      #persona-selector option:hover {
        background: #374151 !important; /* 호버 시 조금 더 밝게 */
        color: #ffffff !important;
      }
      
      #persona-selector option:checked {
        background: #4f46e5 !important; /* 선택된 옵션은 보라색 */
        color: #ffffff !important;
      }
      
      /* Firefox 전용 스타일 */
      @-moz-document url-prefix() {
        #persona-selector option {
          background-color: #1f2937 !important;
          color: #f9fafb !important;
        }
      }
    </style>
  </body>
</html>
